
init:
    N = 5
    M = 4
    NODES = range(0, N)
    counters = [0 for i in NODES]
    ready = False
    # At present init should produce a single state, no non determinism allowed yet

invariants:
    eventually always ready and any(
        [ all([counters[j] == counters[0] for j in range(0,i)]) and
          all([counters[j] == (counters[0]-1)%M for j in range(i,N)])
            for i in range(N+1)
        ]
    )

atomic action ArbitraryState:
    if ready:
        return
    for i in reversed(NODES):
        any j in range(0, M):
            counters[i] = j
    ready = True

atomic action CreateToken:
    if not ready:
        return
    if counters[0] == counters[N-1]:
        `createtoken` counters[0] = (counters[N-1] + 1) % M

atomic action PassToken:
    if not ready:
        return
    any i in NODES[1:]:
        if counters[i] != counters[i-1]:
            `passtoken`
            counters[i] = counters[i-1]
