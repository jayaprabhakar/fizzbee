# Generated from FizzParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,112,1046,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,3,0,
        132,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,141,8,1,1,2,1,2,4,2,145,
        8,2,11,2,12,2,146,1,3,1,3,5,3,151,8,3,10,3,12,3,154,9,3,1,4,1,4,
        1,4,3,4,159,8,4,1,5,1,5,3,5,163,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        5,6,172,8,6,10,6,12,6,175,9,6,1,6,3,6,178,8,6,1,6,3,6,181,8,6,1,
        6,1,6,1,6,1,6,1,6,1,6,3,6,189,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,4,6,202,8,6,11,6,12,6,203,1,6,3,6,207,8,6,1,6,3,6,
        210,8,6,1,6,3,6,213,8,6,1,6,3,6,216,8,6,1,6,1,6,1,6,1,6,5,6,222,
        8,6,10,6,12,6,225,9,6,1,6,1,6,1,6,1,6,5,6,231,8,6,10,6,12,6,234,
        9,6,1,6,1,6,3,6,238,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,258,8,6,1,7,1,7,1,7,1,7,4,7,
        264,8,7,11,7,12,7,265,1,7,1,7,3,7,270,8,7,1,8,1,8,1,8,4,8,275,8,
        8,11,8,12,8,276,1,8,1,8,1,9,5,9,282,8,9,10,9,12,9,285,9,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,3,10,294,8,10,1,10,3,10,297,8,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,3,14,317,8,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,3,15,331,8,15,3,15,333,8,15,1,15,1,
        15,1,15,1,16,1,16,1,16,1,16,3,16,342,8,16,1,16,3,16,345,8,16,1,16,
        1,16,1,16,1,17,3,17,351,8,17,1,17,1,17,1,17,1,17,3,17,357,8,17,1,
        17,1,17,1,17,3,17,362,8,17,1,17,1,17,1,17,1,18,3,18,368,8,18,1,18,
        1,18,1,18,1,18,1,18,1,19,3,19,376,8,19,1,19,1,19,1,19,1,19,3,19,
        382,8,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,391,8,20,1,20,1,
        20,1,20,3,20,396,8,20,1,20,1,20,3,20,400,8,20,1,20,3,20,403,8,20,
        1,20,3,20,406,8,20,1,20,1,20,3,20,410,8,20,3,20,412,8,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,5,23,423,8,23,10,23,12,23,
        426,9,23,1,24,1,24,1,24,3,24,431,8,24,1,24,3,24,434,8,24,1,25,1,
        25,1,25,3,25,439,8,25,1,26,1,26,1,26,5,26,444,8,26,10,26,12,26,447,
        9,26,1,26,3,26,450,8,26,1,26,1,26,1,27,1,27,3,27,456,8,27,1,27,1,
        27,1,27,3,27,461,8,27,1,27,1,27,1,27,3,27,466,8,27,1,27,1,27,1,27,
        1,27,1,27,5,27,473,8,27,10,27,12,27,476,9,27,1,27,3,27,479,8,27,
        1,27,1,27,1,27,1,27,4,27,485,8,27,11,27,12,27,486,1,27,3,27,490,
        8,27,3,27,492,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        3,27,503,8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,511,8,27,3,27,513,
        8,27,3,27,515,8,27,1,27,1,27,3,27,519,8,27,1,27,1,27,1,27,1,27,1,
        27,5,27,526,8,27,10,27,12,27,529,9,27,1,27,1,27,4,27,533,8,27,11,
        27,12,27,534,3,27,537,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
        27,546,8,27,1,27,1,27,1,27,1,27,5,27,552,8,27,10,27,12,27,555,9,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,564,8,27,3,27,566,8,27,
        1,27,1,27,1,27,1,27,1,27,1,27,3,27,574,8,27,1,27,1,27,1,27,1,27,
        1,27,5,27,581,8,27,10,27,12,27,584,9,27,1,27,1,27,3,27,588,8,27,
        1,28,1,28,3,28,592,8,28,1,28,1,28,4,28,596,8,28,11,28,12,28,597,
        1,28,1,28,3,28,602,8,28,1,28,3,28,605,8,28,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,5,30,614,8,30,10,30,12,30,617,9,30,1,30,1,30,3,30,621,
        8,30,1,30,3,30,624,8,30,1,30,1,30,1,30,1,30,1,30,3,30,631,8,30,1,
        30,1,30,1,30,1,30,1,30,3,30,638,8,30,3,30,640,8,30,1,31,1,31,1,31,
        5,31,645,8,31,10,31,12,31,648,9,31,1,31,3,31,651,8,31,1,32,1,32,
        1,32,5,32,656,8,32,10,32,12,32,659,9,32,1,32,3,32,662,8,32,1,33,
        1,33,1,33,3,33,667,8,33,1,34,1,34,1,34,5,34,672,8,34,10,34,12,34,
        675,9,34,1,35,1,35,1,35,3,35,680,8,35,1,36,1,36,1,36,1,36,1,36,1,
        36,3,36,688,8,36,1,36,1,36,3,36,692,8,36,1,36,1,36,3,36,696,8,36,
        1,37,1,37,1,37,3,37,701,8,37,1,37,1,37,1,37,3,37,706,8,37,1,37,1,
        37,3,37,710,8,37,1,37,3,37,713,8,37,1,37,3,37,716,8,37,1,37,1,37,
        3,37,720,8,37,3,37,722,8,37,1,38,1,38,1,38,5,38,727,8,38,10,38,12,
        38,730,9,38,1,39,1,39,1,39,3,39,735,8,39,1,39,3,39,738,8,39,1,40,
        1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,750,8,42,1,42,
        1,42,1,42,1,42,1,42,1,42,5,42,758,8,42,10,42,12,42,761,9,42,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,775,
        8,43,1,43,1,43,1,43,3,43,780,8,43,3,43,782,8,43,1,43,5,43,785,8,
        43,10,43,12,43,788,9,43,1,44,1,44,3,44,792,8,44,1,44,1,44,5,44,796,
        8,44,10,44,12,44,799,9,44,1,44,1,44,3,44,803,8,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,5,44,826,8,44,10,44,12,44,829,9,44,1,45,
        1,45,1,45,3,45,834,8,45,1,45,1,45,1,45,3,45,839,8,45,1,45,1,45,1,
        45,3,45,844,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,852,8,45,1,45,
        1,45,1,45,4,45,857,8,45,11,45,12,45,858,3,45,861,8,45,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,869,8,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,3,46,878,8,46,5,46,880,8,46,10,46,12,46,883,9,46,1,46,3,46,
        886,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,894,8,46,1,47,1,47,3,
        47,898,8,47,1,47,1,47,1,47,1,47,3,47,904,8,47,5,47,906,8,47,10,47,
        12,47,909,9,47,1,47,3,47,912,8,47,3,47,914,8,47,1,48,1,48,1,48,5,
        48,919,8,48,10,48,12,48,922,9,48,1,48,3,48,925,8,48,1,49,1,49,1,
        49,1,49,1,49,1,49,5,49,933,8,49,10,49,12,49,936,9,49,1,50,1,50,1,
        51,1,51,1,51,3,51,943,8,51,1,52,1,52,1,53,1,53,3,53,949,8,53,1,54,
        1,54,1,54,3,54,954,8,54,1,55,1,55,1,55,3,55,959,8,55,1,55,3,55,962,
        8,55,1,56,1,56,3,56,966,8,56,1,56,1,56,1,56,1,56,1,56,3,56,973,8,
        56,1,57,1,57,1,57,5,57,978,8,57,10,57,12,57,981,9,57,1,57,3,57,984,
        8,57,1,58,1,58,1,58,1,58,3,58,990,8,58,1,58,1,58,3,58,994,8,58,1,
        59,1,59,1,59,5,59,999,8,59,10,59,12,59,1002,9,59,1,59,3,59,1005,
        8,59,1,60,1,60,1,60,1,60,3,60,1011,8,60,1,60,3,60,1014,8,60,3,60,
        1016,8,60,1,60,1,60,3,60,1020,8,60,1,60,3,60,1023,8,60,3,60,1025,
        8,60,1,61,1,61,3,61,1029,8,61,1,62,1,62,1,62,1,62,1,62,3,62,1036,
        8,62,1,63,1,63,1,63,1,63,3,63,1042,8,63,3,63,1044,8,63,1,63,0,4,
        84,86,88,98,64,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,0,14,1,0,41,42,1,0,41,43,1,0,41,44,1,0,51,52,
        1,1,3,3,1,0,53,54,1,0,81,93,2,0,66,67,71,71,3,0,55,55,68,70,79,79,
        1,0,66,67,1,0,64,65,2,0,39,40,108,108,1,0,96,99,2,0,55,55,59,59,
        1195,0,131,1,0,0,0,2,140,1,0,0,0,4,144,1,0,0,0,6,148,1,0,0,0,8,158,
        1,0,0,0,10,160,1,0,0,0,12,257,1,0,0,0,14,269,1,0,0,0,16,271,1,0,
        0,0,18,283,1,0,0,0,20,289,1,0,0,0,22,300,1,0,0,0,24,305,1,0,0,0,
        26,309,1,0,0,0,28,313,1,0,0,0,30,318,1,0,0,0,32,337,1,0,0,0,34,350,
        1,0,0,0,36,367,1,0,0,0,38,375,1,0,0,0,40,411,1,0,0,0,42,413,1,0,
        0,0,44,416,1,0,0,0,46,419,1,0,0,0,48,433,1,0,0,0,50,435,1,0,0,0,
        52,440,1,0,0,0,54,587,1,0,0,0,56,604,1,0,0,0,58,606,1,0,0,0,60,639,
        1,0,0,0,62,641,1,0,0,0,64,652,1,0,0,0,66,663,1,0,0,0,68,668,1,0,
        0,0,70,676,1,0,0,0,72,695,1,0,0,0,74,721,1,0,0,0,76,723,1,0,0,0,
        78,737,1,0,0,0,80,739,1,0,0,0,82,742,1,0,0,0,84,749,1,0,0,0,86,762,
        1,0,0,0,88,802,1,0,0,0,90,860,1,0,0,0,92,893,1,0,0,0,94,897,1,0,
        0,0,96,915,1,0,0,0,98,926,1,0,0,0,100,937,1,0,0,0,102,942,1,0,0,
        0,104,944,1,0,0,0,106,946,1,0,0,0,108,953,1,0,0,0,110,961,1,0,0,
        0,112,972,1,0,0,0,114,974,1,0,0,0,116,993,1,0,0,0,118,995,1,0,0,
        0,120,1024,1,0,0,0,122,1026,1,0,0,0,124,1030,1,0,0,0,126,1043,1,
        0,0,0,128,132,3,2,1,0,129,132,3,4,2,0,130,132,3,6,3,0,131,128,1,
        0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,
        0,0,0,133,134,5,0,0,1,134,1,1,0,0,0,135,141,5,3,0,0,136,141,3,52,
        26,0,137,138,3,12,6,0,138,139,5,3,0,0,139,141,1,0,0,0,140,135,1,
        0,0,0,140,136,1,0,0,0,140,137,1,0,0,0,141,3,1,0,0,0,142,145,5,3,
        0,0,143,145,3,8,4,0,144,142,1,0,0,0,144,143,1,0,0,0,145,146,1,0,
        0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,5,1,0,0,0,148,152,3,96,48,
        0,149,151,5,3,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,
        0,152,153,1,0,0,0,153,7,1,0,0,0,154,152,1,0,0,0,155,159,3,52,26,
        0,156,159,3,12,6,0,157,159,3,10,5,0,158,155,1,0,0,0,158,156,1,0,
        0,0,158,157,1,0,0,0,159,9,1,0,0,0,160,162,5,95,0,0,161,163,5,3,0,
        0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,3,8,4,
        0,165,11,1,0,0,0,166,167,5,13,0,0,167,168,3,72,36,0,168,169,5,57,
        0,0,169,173,3,14,7,0,170,172,3,22,11,0,171,170,1,0,0,0,172,175,1,
        0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,177,1,0,0,0,175,173,1,
        0,0,0,176,178,3,24,12,0,177,176,1,0,0,0,177,178,1,0,0,0,178,258,
        1,0,0,0,179,181,7,0,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,
        1,0,0,0,182,183,5,16,0,0,183,184,3,72,36,0,184,185,5,57,0,0,185,
        186,3,14,7,0,186,258,1,0,0,0,187,189,7,1,0,0,188,187,1,0,0,0,188,
        189,1,0,0,0,189,190,1,0,0,0,190,191,5,17,0,0,191,192,3,62,31,0,192,
        193,5,18,0,0,193,194,3,96,48,0,194,195,5,57,0,0,195,196,3,14,7,0,
        196,258,1,0,0,0,197,198,5,19,0,0,198,199,5,57,0,0,199,212,3,14,7,
        0,200,202,3,30,15,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,
        0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,207,3,24,12,0,206,205,1,
        0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,210,3,26,13,0,209,208,
        1,0,0,0,209,210,1,0,0,0,210,213,1,0,0,0,211,213,3,26,13,0,212,201,
        1,0,0,0,212,211,1,0,0,0,213,258,1,0,0,0,214,216,5,35,0,0,215,214,
        1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,5,22,0,0,218,223,
        3,28,14,0,219,220,5,56,0,0,220,222,3,28,14,0,221,219,1,0,0,0,222,
        225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,
        223,1,0,0,0,226,227,5,57,0,0,227,228,3,14,7,0,228,258,1,0,0,0,229,
        231,3,20,10,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,
        233,1,0,0,0,233,237,1,0,0,0,234,232,1,0,0,0,235,238,3,32,16,0,236,
        238,3,34,17,0,237,235,1,0,0,0,237,236,1,0,0,0,238,258,1,0,0,0,239,
        240,5,45,0,0,240,241,3,62,31,0,241,242,5,18,0,0,242,243,3,96,48,
        0,243,244,5,57,0,0,244,245,3,14,7,0,245,258,1,0,0,0,246,247,5,49,
        0,0,247,248,5,57,0,0,248,258,3,14,7,0,249,250,5,50,0,0,250,251,5,
        57,0,0,251,258,3,16,8,0,252,258,3,36,18,0,253,258,3,38,19,0,254,
        255,7,2,0,0,255,256,5,57,0,0,256,258,3,14,7,0,257,166,1,0,0,0,257,
        180,1,0,0,0,257,188,1,0,0,0,257,197,1,0,0,0,257,215,1,0,0,0,257,
        232,1,0,0,0,257,239,1,0,0,0,257,246,1,0,0,0,257,249,1,0,0,0,257,
        252,1,0,0,0,257,253,1,0,0,0,257,254,1,0,0,0,258,13,1,0,0,0,259,270,
        3,52,26,0,260,261,5,3,0,0,261,263,5,1,0,0,262,264,3,8,4,0,263,262,
        1,0,0,0,264,265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,267,
        1,0,0,0,267,268,5,2,0,0,268,270,1,0,0,0,269,259,1,0,0,0,269,260,
        1,0,0,0,270,15,1,0,0,0,271,272,5,3,0,0,272,274,5,1,0,0,273,275,3,
        18,9,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,
        0,0,0,277,278,1,0,0,0,278,279,5,2,0,0,279,17,1,0,0,0,280,282,7,3,
        0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,
        0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,3,72,36,0,287,288,7,
        4,0,0,288,19,1,0,0,0,289,290,5,79,0,0,290,296,3,98,49,0,291,293,
        5,102,0,0,292,294,3,114,57,0,293,292,1,0,0,0,293,294,1,0,0,0,294,
        295,1,0,0,0,295,297,5,103,0,0,296,291,1,0,0,0,296,297,1,0,0,0,297,
        298,1,0,0,0,298,299,5,3,0,0,299,21,1,0,0,0,300,301,5,14,0,0,301,
        302,3,72,36,0,302,303,5,57,0,0,303,304,3,14,7,0,304,23,1,0,0,0,305,
        306,5,15,0,0,306,307,5,57,0,0,307,308,3,14,7,0,308,25,1,0,0,0,309,
        310,5,21,0,0,310,311,5,57,0,0,311,312,3,14,7,0,312,27,1,0,0,0,313,
        316,3,72,36,0,314,315,5,10,0,0,315,317,3,88,44,0,316,314,1,0,0,0,
        316,317,1,0,0,0,317,29,1,0,0,0,318,332,5,23,0,0,319,330,3,72,36,
        0,320,321,4,15,0,0,321,322,5,56,0,0,322,323,3,100,50,0,323,324,6,
        15,-1,0,324,331,1,0,0,0,325,326,4,15,1,0,326,327,5,10,0,0,327,328,
        3,100,50,0,328,329,6,15,-1,0,329,331,1,0,0,0,330,320,1,0,0,0,330,
        325,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,319,1,0,0,0,332,
        333,1,0,0,0,333,334,1,0,0,0,334,335,5,57,0,0,335,336,3,14,7,0,336,
        31,1,0,0,0,337,338,5,29,0,0,338,344,3,100,50,0,339,341,5,102,0,0,
        340,342,3,114,57,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,
        0,343,345,5,103,0,0,344,339,1,0,0,0,344,345,1,0,0,0,345,346,1,0,
        0,0,346,347,5,57,0,0,347,348,3,14,7,0,348,33,1,0,0,0,349,351,5,35,
        0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,5,4,
        0,0,353,354,3,100,50,0,354,356,5,102,0,0,355,357,3,40,20,0,356,355,
        1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,361,5,103,0,0,359,360,
        5,80,0,0,360,362,3,72,36,0,361,359,1,0,0,0,361,362,1,0,0,0,362,363,
        1,0,0,0,363,364,5,57,0,0,364,365,3,14,7,0,365,35,1,0,0,0,366,368,
        7,2,0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,
        5,46,0,0,370,371,3,100,50,0,371,372,5,57,0,0,372,373,3,14,7,0,373,
        37,1,0,0,0,374,376,7,2,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,
        1,0,0,0,377,378,5,47,0,0,378,379,3,100,50,0,379,381,5,102,0,0,380,
        382,3,40,20,0,381,380,1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,
        384,5,103,0,0,384,385,5,57,0,0,385,386,3,14,7,0,386,39,1,0,0,0,387,
        388,3,46,23,0,388,389,5,56,0,0,389,391,1,0,0,0,390,387,1,0,0,0,390,
        391,1,0,0,0,391,402,1,0,0,0,392,395,3,42,21,0,393,394,5,56,0,0,394,
        396,3,46,23,0,395,393,1,0,0,0,395,396,1,0,0,0,396,399,1,0,0,0,397,
        398,5,56,0,0,398,400,3,44,22,0,399,397,1,0,0,0,399,400,1,0,0,0,400,
        403,1,0,0,0,401,403,3,44,22,0,402,392,1,0,0,0,402,401,1,0,0,0,403,
        405,1,0,0,0,404,406,5,56,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,
        412,1,0,0,0,407,409,3,46,23,0,408,410,5,56,0,0,409,408,1,0,0,0,409,
        410,1,0,0,0,410,412,1,0,0,0,411,390,1,0,0,0,411,407,1,0,0,0,412,
        41,1,0,0,0,413,414,5,55,0,0,414,415,3,50,25,0,415,43,1,0,0,0,416,
        417,5,59,0,0,417,418,3,50,25,0,418,45,1,0,0,0,419,424,3,48,24,0,
        420,421,5,56,0,0,421,423,3,48,24,0,422,420,1,0,0,0,423,426,1,0,0,
        0,424,422,1,0,0,0,424,425,1,0,0,0,425,47,1,0,0,0,426,424,1,0,0,0,
        427,430,3,50,25,0,428,429,5,60,0,0,429,431,3,72,36,0,430,428,1,0,
        0,0,430,431,1,0,0,0,431,434,1,0,0,0,432,434,5,55,0,0,433,427,1,0,
        0,0,433,432,1,0,0,0,434,49,1,0,0,0,435,438,3,100,50,0,436,437,5,
        57,0,0,437,439,3,72,36,0,438,436,1,0,0,0,438,439,1,0,0,0,439,51,
        1,0,0,0,440,445,3,54,27,0,441,442,5,58,0,0,442,444,3,54,27,0,443,
        441,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,
        449,1,0,0,0,447,445,1,0,0,0,448,450,5,58,0,0,449,448,1,0,0,0,449,
        450,1,0,0,0,450,451,1,0,0,0,451,452,7,4,0,0,452,53,1,0,0,0,453,454,
        5,108,0,0,454,456,5,60,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,457,
        1,0,0,0,457,458,5,108,0,0,458,460,5,102,0,0,459,461,3,114,57,0,460,
        459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,588,5,103,0,0,463,
        465,3,56,28,0,464,466,3,60,30,0,465,464,1,0,0,0,465,466,1,0,0,0,
        466,588,1,0,0,0,467,468,4,27,2,0,468,491,5,37,0,0,469,474,3,72,36,
        0,470,471,5,56,0,0,471,473,3,72,36,0,472,470,1,0,0,0,473,476,1,0,
        0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,478,1,0,0,0,476,474,1,0,
        0,0,477,479,5,56,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,492,1,0,
        0,0,480,481,5,65,0,0,481,484,3,72,36,0,482,483,5,56,0,0,483,485,
        3,72,36,0,484,482,1,0,0,0,485,486,1,0,0,0,486,484,1,0,0,0,486,487,
        1,0,0,0,487,489,1,0,0,0,488,490,5,56,0,0,489,488,1,0,0,0,489,490,
        1,0,0,0,490,492,1,0,0,0,491,469,1,0,0,0,491,480,1,0,0,0,492,493,
        1,0,0,0,493,494,6,27,-1,0,494,588,1,0,0,0,495,496,5,31,0,0,496,588,
        3,62,31,0,497,588,5,32,0,0,498,588,5,34,0,0,499,588,5,33,0,0,500,
        502,5,5,0,0,501,503,3,96,48,0,502,501,1,0,0,0,502,503,1,0,0,0,503,
        588,1,0,0,0,504,514,5,6,0,0,505,512,3,72,36,0,506,507,5,56,0,0,507,
        510,3,72,36,0,508,509,5,56,0,0,509,511,3,72,36,0,510,508,1,0,0,0,
        510,511,1,0,0,0,511,513,1,0,0,0,512,506,1,0,0,0,512,513,1,0,0,0,
        513,515,1,0,0,0,514,505,1,0,0,0,514,515,1,0,0,0,515,518,1,0,0,0,
        516,517,5,7,0,0,517,519,3,72,36,0,518,516,1,0,0,0,518,519,1,0,0,
        0,519,588,1,0,0,0,520,588,3,106,53,0,521,522,5,8,0,0,522,588,3,68,
        34,0,523,536,5,7,0,0,524,526,7,5,0,0,525,524,1,0,0,0,526,529,1,0,
        0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,527,1,0,
        0,0,530,537,3,98,49,0,531,533,7,5,0,0,532,531,1,0,0,0,533,534,1,
        0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,527,1,
        0,0,0,536,532,1,0,0,0,537,538,1,0,0,0,538,545,5,8,0,0,539,546,5,
        55,0,0,540,541,5,102,0,0,541,542,3,64,32,0,542,543,5,103,0,0,543,
        546,1,0,0,0,544,546,3,64,32,0,545,539,1,0,0,0,545,540,1,0,0,0,545,
        544,1,0,0,0,546,588,1,0,0,0,547,548,5,11,0,0,548,553,3,100,50,0,
        549,550,5,56,0,0,550,552,3,100,50,0,551,549,1,0,0,0,552,555,1,0,
        0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,588,1,0,0,0,555,553,1,0,
        0,0,556,557,4,27,3,0,557,558,5,38,0,0,558,565,3,88,44,0,559,560,
        5,18,0,0,560,563,3,72,36,0,561,562,5,56,0,0,562,564,3,72,36,0,563,
        561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,559,1,0,0,0,565,
        566,1,0,0,0,566,567,1,0,0,0,567,568,6,27,-1,0,568,588,1,0,0,0,569,
        570,5,12,0,0,570,573,3,72,36,0,571,572,5,56,0,0,572,574,3,72,36,
        0,573,571,1,0,0,0,573,574,1,0,0,0,574,588,1,0,0,0,575,576,4,27,4,
        0,576,577,5,9,0,0,577,582,3,100,50,0,578,579,5,56,0,0,579,581,3,
        100,50,0,580,578,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,
        1,0,0,0,583,585,1,0,0,0,584,582,1,0,0,0,585,586,6,27,-1,0,586,588,
        1,0,0,0,587,455,1,0,0,0,587,463,1,0,0,0,587,467,1,0,0,0,587,495,
        1,0,0,0,587,497,1,0,0,0,587,498,1,0,0,0,587,499,1,0,0,0,587,500,
        1,0,0,0,587,504,1,0,0,0,587,520,1,0,0,0,587,521,1,0,0,0,587,523,
        1,0,0,0,587,547,1,0,0,0,587,556,1,0,0,0,587,569,1,0,0,0,587,575,
        1,0,0,0,588,55,1,0,0,0,589,592,3,72,36,0,590,592,3,58,29,0,591,589,
        1,0,0,0,591,590,1,0,0,0,592,593,1,0,0,0,593,594,5,56,0,0,594,596,
        1,0,0,0,595,591,1,0,0,0,596,597,1,0,0,0,597,595,1,0,0,0,597,598,
        1,0,0,0,598,601,1,0,0,0,599,602,3,72,36,0,600,602,3,58,29,0,601,
        599,1,0,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,605,1,0,0,0,603,
        605,3,96,48,0,604,595,1,0,0,0,604,603,1,0,0,0,605,57,1,0,0,0,606,
        607,5,55,0,0,607,608,3,88,44,0,608,59,1,0,0,0,609,623,5,60,0,0,610,
        615,3,56,28,0,611,612,5,60,0,0,612,614,3,56,28,0,613,611,1,0,0,0,
        614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,620,1,0,0,0,
        617,615,1,0,0,0,618,619,5,60,0,0,619,621,3,106,53,0,620,618,1,0,
        0,0,620,621,1,0,0,0,621,624,1,0,0,0,622,624,3,106,53,0,623,610,1,
        0,0,0,623,622,1,0,0,0,624,640,1,0,0,0,625,626,4,30,5,0,626,627,5,
        57,0,0,627,630,3,72,36,0,628,629,5,60,0,0,629,631,3,96,48,0,630,
        628,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,6,30,-1,0,633,
        640,1,0,0,0,634,637,7,6,0,0,635,638,3,106,53,0,636,638,3,96,48,0,
        637,635,1,0,0,0,637,636,1,0,0,0,638,640,1,0,0,0,639,609,1,0,0,0,
        639,625,1,0,0,0,639,634,1,0,0,0,640,61,1,0,0,0,641,646,3,88,44,0,
        642,643,5,56,0,0,643,645,3,88,44,0,644,642,1,0,0,0,645,648,1,0,0,
        0,646,644,1,0,0,0,646,647,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,
        0,649,651,5,56,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,63,1,0,0,
        0,652,657,3,66,33,0,653,654,5,56,0,0,654,656,3,66,33,0,655,653,1,
        0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,661,1,
        0,0,0,659,657,1,0,0,0,660,662,5,56,0,0,661,660,1,0,0,0,661,662,1,
        0,0,0,662,65,1,0,0,0,663,666,3,100,50,0,664,665,5,10,0,0,665,667,
        3,100,50,0,666,664,1,0,0,0,666,667,1,0,0,0,667,67,1,0,0,0,668,673,
        3,70,35,0,669,670,5,56,0,0,670,672,3,70,35,0,671,669,1,0,0,0,672,
        675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,69,1,0,0,0,675,673,
        1,0,0,0,676,679,3,98,49,0,677,678,5,10,0,0,678,680,3,100,50,0,679,
        677,1,0,0,0,679,680,1,0,0,0,680,71,1,0,0,0,681,687,3,84,42,0,682,
        683,5,13,0,0,683,684,3,84,42,0,684,685,5,15,0,0,685,686,3,72,36,
        0,686,688,1,0,0,0,687,682,1,0,0,0,687,688,1,0,0,0,688,696,1,0,0,
        0,689,691,5,24,0,0,690,692,3,74,37,0,691,690,1,0,0,0,691,692,1,0,
        0,0,692,693,1,0,0,0,693,694,5,57,0,0,694,696,3,72,36,0,695,681,1,
        0,0,0,695,689,1,0,0,0,696,73,1,0,0,0,697,698,3,76,38,0,698,699,5,
        56,0,0,699,701,1,0,0,0,700,697,1,0,0,0,700,701,1,0,0,0,701,712,1,
        0,0,0,702,705,3,80,40,0,703,704,5,56,0,0,704,706,3,76,38,0,705,703,
        1,0,0,0,705,706,1,0,0,0,706,709,1,0,0,0,707,708,5,56,0,0,708,710,
        3,82,41,0,709,707,1,0,0,0,709,710,1,0,0,0,710,713,1,0,0,0,711,713,
        3,82,41,0,712,702,1,0,0,0,712,711,1,0,0,0,713,715,1,0,0,0,714,716,
        5,56,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,722,1,0,0,0,717,719,
        3,76,38,0,718,720,5,56,0,0,719,718,1,0,0,0,719,720,1,0,0,0,720,722,
        1,0,0,0,721,700,1,0,0,0,721,717,1,0,0,0,722,75,1,0,0,0,723,728,3,
        78,39,0,724,725,5,56,0,0,725,727,3,78,39,0,726,724,1,0,0,0,727,730,
        1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,77,1,0,0,0,730,728,1,
        0,0,0,731,734,3,100,50,0,732,733,5,60,0,0,733,735,3,72,36,0,734,
        732,1,0,0,0,734,735,1,0,0,0,735,738,1,0,0,0,736,738,5,55,0,0,737,
        731,1,0,0,0,737,736,1,0,0,0,738,79,1,0,0,0,739,740,5,55,0,0,740,
        741,3,100,50,0,741,81,1,0,0,0,742,743,5,59,0,0,743,744,3,100,50,
        0,744,83,1,0,0,0,745,746,6,42,-1,0,746,750,3,86,43,0,747,748,5,27,
        0,0,748,750,3,84,42,3,749,745,1,0,0,0,749,747,1,0,0,0,750,759,1,
        0,0,0,751,752,10,2,0,0,752,753,5,26,0,0,753,758,3,84,42,3,754,755,
        10,1,0,0,755,756,5,25,0,0,756,758,3,84,42,2,757,751,1,0,0,0,757,
        754,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,
        85,1,0,0,0,761,759,1,0,0,0,762,763,6,43,-1,0,763,764,3,88,44,0,764,
        786,1,0,0,0,765,781,10,2,0,0,766,782,5,72,0,0,767,782,5,73,0,0,768,
        782,5,74,0,0,769,782,5,75,0,0,770,782,5,76,0,0,771,782,5,77,0,0,
        772,782,5,78,0,0,773,775,5,27,0,0,774,773,1,0,0,0,774,775,1,0,0,
        0,775,776,1,0,0,0,776,782,5,18,0,0,777,779,5,28,0,0,778,780,5,27,
        0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,766,1,0,
        0,0,781,767,1,0,0,0,781,768,1,0,0,0,781,769,1,0,0,0,781,770,1,0,
        0,0,781,771,1,0,0,0,781,772,1,0,0,0,781,774,1,0,0,0,781,777,1,0,
        0,0,782,783,1,0,0,0,783,785,3,86,43,3,784,765,1,0,0,0,785,788,1,
        0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,87,1,0,0,0,788,786,1,0,
        0,0,789,791,6,44,-1,0,790,792,5,36,0,0,791,790,1,0,0,0,791,792,1,
        0,0,0,792,793,1,0,0,0,793,797,3,90,45,0,794,796,3,110,55,0,795,794,
        1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,803,
        1,0,0,0,799,797,1,0,0,0,800,801,7,7,0,0,801,803,3,88,44,7,802,789,
        1,0,0,0,802,800,1,0,0,0,803,827,1,0,0,0,804,805,10,8,0,0,805,806,
        5,59,0,0,806,826,3,88,44,8,807,808,10,6,0,0,808,809,7,8,0,0,809,
        826,3,88,44,7,810,811,10,5,0,0,811,812,7,9,0,0,812,826,3,88,44,6,
        813,814,10,4,0,0,814,815,7,10,0,0,815,826,3,88,44,5,816,817,10,3,
        0,0,817,818,5,63,0,0,818,826,3,88,44,4,819,820,10,2,0,0,820,821,
        5,62,0,0,821,826,3,88,44,3,822,823,10,1,0,0,823,824,5,61,0,0,824,
        826,3,88,44,2,825,804,1,0,0,0,825,807,1,0,0,0,825,810,1,0,0,0,825,
        813,1,0,0,0,825,816,1,0,0,0,825,819,1,0,0,0,825,822,1,0,0,0,826,
        829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,89,1,0,0,0,829,827,
        1,0,0,0,830,833,5,102,0,0,831,834,3,106,53,0,832,834,3,94,47,0,833,
        831,1,0,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,
        861,5,103,0,0,836,838,5,106,0,0,837,839,3,94,47,0,838,837,1,0,0,
        0,838,839,1,0,0,0,839,840,1,0,0,0,840,861,5,107,0,0,841,843,5,104,
        0,0,842,844,3,92,46,0,843,842,1,0,0,0,843,844,1,0,0,0,844,845,1,
        0,0,0,845,861,5,105,0,0,846,861,5,54,0,0,847,861,3,100,50,0,848,
        861,5,37,0,0,849,861,5,38,0,0,850,852,5,67,0,0,851,850,1,0,0,0,851,
        852,1,0,0,0,852,853,1,0,0,0,853,861,3,102,51,0,854,861,5,20,0,0,
        855,857,5,94,0,0,856,855,1,0,0,0,857,858,1,0,0,0,858,856,1,0,0,0,
        858,859,1,0,0,0,859,861,1,0,0,0,860,830,1,0,0,0,860,836,1,0,0,0,
        860,841,1,0,0,0,860,846,1,0,0,0,860,847,1,0,0,0,860,848,1,0,0,0,
        860,849,1,0,0,0,860,851,1,0,0,0,860,854,1,0,0,0,860,856,1,0,0,0,
        861,91,1,0,0,0,862,863,3,72,36,0,863,864,5,57,0,0,864,865,3,72,36,
        0,865,869,1,0,0,0,866,867,5,59,0,0,867,869,3,88,44,0,868,862,1,0,
        0,0,868,866,1,0,0,0,869,881,1,0,0,0,870,877,5,56,0,0,871,872,3,72,
        36,0,872,873,5,57,0,0,873,874,3,72,36,0,874,878,1,0,0,0,875,876,
        5,59,0,0,876,878,3,88,44,0,877,871,1,0,0,0,877,875,1,0,0,0,878,880,
        1,0,0,0,879,870,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,881,882,
        1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,884,886,5,56,0,0,885,884,
        1,0,0,0,885,886,1,0,0,0,886,894,1,0,0,0,887,888,3,72,36,0,888,889,
        5,57,0,0,889,890,3,72,36,0,890,891,3,124,62,0,891,894,1,0,0,0,892,
        894,3,94,47,0,893,868,1,0,0,0,893,887,1,0,0,0,893,892,1,0,0,0,894,
        93,1,0,0,0,895,898,3,72,36,0,896,898,3,58,29,0,897,895,1,0,0,0,897,
        896,1,0,0,0,898,913,1,0,0,0,899,914,3,124,62,0,900,903,5,56,0,0,
        901,904,3,72,36,0,902,904,3,58,29,0,903,901,1,0,0,0,903,902,1,0,
        0,0,904,906,1,0,0,0,905,900,1,0,0,0,906,909,1,0,0,0,907,905,1,0,
        0,0,907,908,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,910,912,5,56,
        0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,899,1,0,
        0,0,913,907,1,0,0,0,914,95,1,0,0,0,915,920,3,72,36,0,916,917,5,56,
        0,0,917,919,3,72,36,0,918,916,1,0,0,0,919,922,1,0,0,0,920,918,1,
        0,0,0,920,921,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,0,923,925,5,
        56,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,97,1,0,0,0,926,927,6,
        49,-1,0,927,928,3,100,50,0,928,934,1,0,0,0,929,930,10,2,0,0,930,
        931,5,53,0,0,931,933,3,100,50,0,932,929,1,0,0,0,933,936,1,0,0,0,
        934,932,1,0,0,0,934,935,1,0,0,0,935,99,1,0,0,0,936,934,1,0,0,0,937,
        938,7,11,0,0,938,101,1,0,0,0,939,943,3,104,52,0,940,943,5,100,0,
        0,941,943,5,101,0,0,942,939,1,0,0,0,942,940,1,0,0,0,942,941,1,0,
        0,0,943,103,1,0,0,0,944,945,7,12,0,0,945,105,1,0,0,0,946,948,5,30,
        0,0,947,949,3,108,54,0,948,947,1,0,0,0,948,949,1,0,0,0,949,107,1,
        0,0,0,950,951,5,7,0,0,951,954,3,72,36,0,952,954,3,96,48,0,953,950,
        1,0,0,0,953,952,1,0,0,0,954,109,1,0,0,0,955,956,5,53,0,0,956,958,
        3,100,50,0,957,959,3,112,56,0,958,957,1,0,0,0,958,959,1,0,0,0,959,
        962,1,0,0,0,960,962,3,112,56,0,961,955,1,0,0,0,961,960,1,0,0,0,962,
        111,1,0,0,0,963,965,5,102,0,0,964,966,3,114,57,0,965,964,1,0,0,0,
        965,966,1,0,0,0,966,967,1,0,0,0,967,973,5,103,0,0,968,969,5,106,
        0,0,969,970,3,118,59,0,970,971,5,107,0,0,971,973,1,0,0,0,972,963,
        1,0,0,0,972,968,1,0,0,0,973,113,1,0,0,0,974,979,3,116,58,0,975,976,
        5,56,0,0,976,978,3,116,58,0,977,975,1,0,0,0,978,981,1,0,0,0,979,
        977,1,0,0,0,979,980,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,982,
        984,5,56,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,115,1,0,0,0,985,
        989,3,72,36,0,986,990,3,124,62,0,987,988,5,60,0,0,988,990,3,72,36,
        0,989,986,1,0,0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,994,1,0,0,
        0,991,992,7,13,0,0,992,994,3,72,36,0,993,985,1,0,0,0,993,991,1,0,
        0,0,994,117,1,0,0,0,995,1000,3,120,60,0,996,997,5,56,0,0,997,999,
        3,120,60,0,998,996,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,
        1001,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1003,1005,5,56,
        0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,119,1,0,0,0,1006,1025,
        5,54,0,0,1007,1015,3,72,36,0,1008,1010,5,57,0,0,1009,1011,3,72,36,
        0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1013,1,0,0,0,1012,1014,
        3,122,61,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1016,1,0,0,0,
        1015,1008,1,0,0,0,1015,1016,1,0,0,0,1016,1025,1,0,0,0,1017,1019,
        5,57,0,0,1018,1020,3,72,36,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,
        1020,1022,1,0,0,0,1021,1023,3,122,61,0,1022,1021,1,0,0,0,1022,1023,
        1,0,0,0,1023,1025,1,0,0,0,1024,1006,1,0,0,0,1024,1007,1,0,0,0,1024,
        1017,1,0,0,0,1025,121,1,0,0,0,1026,1028,5,57,0,0,1027,1029,3,72,
        36,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,123,1,0,0,0,1030,1031,
        5,17,0,0,1031,1032,3,62,31,0,1032,1033,5,18,0,0,1033,1035,3,84,42,
        0,1034,1036,3,126,63,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,
        125,1,0,0,0,1037,1044,3,124,62,0,1038,1039,5,13,0,0,1039,1041,3,
        72,36,0,1040,1042,3,126,63,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,
        1042,1044,1,0,0,0,1043,1037,1,0,0,0,1043,1038,1,0,0,0,1044,127,1,
        0,0,0,157,131,140,144,146,152,158,162,173,177,180,188,203,206,209,
        212,215,223,232,237,257,265,269,276,283,293,296,316,330,332,341,
        344,350,356,361,367,375,381,390,395,399,402,405,409,411,424,430,
        433,438,445,449,455,460,465,474,478,486,489,491,502,510,512,514,
        518,527,534,536,545,553,563,565,573,582,587,591,597,601,604,615,
        620,623,630,637,639,646,650,657,661,666,673,679,687,691,695,700,
        705,709,712,715,719,721,728,734,737,749,757,759,774,779,781,786,
        791,797,802,825,827,833,838,843,851,858,860,868,877,881,885,893,
        897,903,907,911,913,920,924,934,942,948,953,958,961,965,972,979,
        983,989,993,1000,1004,1010,1013,1015,1019,1022,1024,1028,1035,1041,
        1043
    ]

class FizzParser ( PythonParserBase ):

    grammarFileName = "FizzParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'atomic'", "'serial'", "'parallel'", "'oneof'", "'any'", 
                     "'action'", "'func'", "'params'", "'init'", "'invariants'", 
                     "'always'", "'eventually'", "'.'", "'...'", "'*'", 
                     "','", "':'", "';'", "'**'", "'='", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", 
                     "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", 
                     "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
                     "'**='", "'//='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "ATOMIC", "SERIAL", 
                      "PARALLEL", "ONEOF", "ANY", "ACTION", "FUNC", "PARAMS", 
                      "INIT", "INVARIANTS", "ALWAYS", "EVENTUALLY", "DOT", 
                      "ELLIPSIS", "STAR", "COMMA", "COLON", "SEMI_COLON", 
                      "POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", 
                      "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", 
                      "NOT_OP", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
                      "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "STRING", "LABEL", "DECIMAL_INTEGER", 
                      "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", 
                      "FLOAT_NUMBER", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", 
                      "LINE_JOIN", "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_labeled_stmt = 5
    RULE_compound_stmt = 6
    RULE_suite = 7
    RULE_invariants_suite = 8
    RULE_invariant_stmt = 9
    RULE_decorator = 10
    RULE_elif_clause = 11
    RULE_else_clause = 12
    RULE_finally_clause = 13
    RULE_with_item = 14
    RULE_except_clause = 15
    RULE_classdef = 16
    RULE_funcdef = 17
    RULE_actiondef = 18
    RULE_functiondef = 19
    RULE_typedargslist = 20
    RULE_args = 21
    RULE_kwargs = 22
    RULE_def_parameters = 23
    RULE_def_parameter = 24
    RULE_named_parameter = 25
    RULE_simple_stmt = 26
    RULE_small_stmt = 27
    RULE_testlist_star_expr = 28
    RULE_star_expr = 29
    RULE_assign_part = 30
    RULE_exprlist = 31
    RULE_import_as_names = 32
    RULE_import_as_name = 33
    RULE_dotted_as_names = 34
    RULE_dotted_as_name = 35
    RULE_test = 36
    RULE_varargslist = 37
    RULE_vardef_parameters = 38
    RULE_vardef_parameter = 39
    RULE_varargs = 40
    RULE_varkwargs = 41
    RULE_logical_test = 42
    RULE_comparison = 43
    RULE_expr = 44
    RULE_atom = 45
    RULE_dictorsetmaker = 46
    RULE_testlist_comp = 47
    RULE_testlist = 48
    RULE_dotted_name = 49
    RULE_name = 50
    RULE_number = 51
    RULE_integer = 52
    RULE_yield_expr = 53
    RULE_yield_arg = 54
    RULE_trailer = 55
    RULE_arguments = 56
    RULE_arglist = 57
    RULE_argument = 58
    RULE_subscriptlist = 59
    RULE_subscript = 60
    RULE_sliceop = 61
    RULE_comp_for = 62
    RULE_comp_iter = 63

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "labeled_stmt", "compound_stmt", "suite", "invariants_suite", 
                   "invariant_stmt", "decorator", "elif_clause", "else_clause", 
                   "finally_clause", "with_item", "except_clause", "classdef", 
                   "funcdef", "actiondef", "functiondef", "typedargslist", 
                   "args", "kwargs", "def_parameters", "def_parameter", 
                   "named_parameter", "simple_stmt", "small_stmt", "testlist_star_expr", 
                   "star_expr", "assign_part", "exprlist", "import_as_names", 
                   "import_as_name", "dotted_as_names", "dotted_as_name", 
                   "test", "varargslist", "vardef_parameters", "vardef_parameter", 
                   "varargs", "varkwargs", "logical_test", "comparison", 
                   "expr", "atom", "dictorsetmaker", "testlist_comp", "testlist", 
                   "dotted_name", "name", "number", "integer", "yield_expr", 
                   "yield_arg", "trailer", "arguments", "arglist", "argument", 
                   "subscriptlist", "subscript", "sliceop", "comp_for", 
                   "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    ATOMIC=41
    SERIAL=42
    PARALLEL=43
    ONEOF=44
    ANY=45
    ACTION=46
    FUNC=47
    PARAMS=48
    INIT=49
    INVARIANTS=50
    ALWAYS=51
    EVENTUALLY=52
    DOT=53
    ELLIPSIS=54
    STAR=55
    COMMA=56
    COLON=57
    SEMI_COLON=58
    POWER=59
    ASSIGN=60
    OR_OP=61
    XOR=62
    AND_OP=63
    LEFT_SHIFT=64
    RIGHT_SHIFT=65
    ADD=66
    MINUS=67
    DIV=68
    MOD=69
    IDIV=70
    NOT_OP=71
    LESS_THAN=72
    GREATER_THAN=73
    EQUALS=74
    GT_EQ=75
    LT_EQ=76
    NOT_EQ_1=77
    NOT_EQ_2=78
    AT=79
    ARROW=80
    ADD_ASSIGN=81
    SUB_ASSIGN=82
    MULT_ASSIGN=83
    AT_ASSIGN=84
    DIV_ASSIGN=85
    MOD_ASSIGN=86
    AND_ASSIGN=87
    OR_ASSIGN=88
    XOR_ASSIGN=89
    LEFT_SHIFT_ASSIGN=90
    RIGHT_SHIFT_ASSIGN=91
    POWER_ASSIGN=92
    IDIV_ASSIGN=93
    STRING=94
    LABEL=95
    DECIMAL_INTEGER=96
    OCT_INTEGER=97
    HEX_INTEGER=98
    BIN_INTEGER=99
    IMAG_NUMBER=100
    FLOAT_NUMBER=101
    OPEN_PAREN=102
    CLOSE_PAREN=103
    OPEN_BRACE=104
    CLOSE_BRACE=105
    OPEN_BRACKET=106
    CLOSE_BRACKET=107
    NAME=108
    LINE_JOIN=109
    NEWLINE=110
    WS=111
    COMMENT=112

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(FizzParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(FizzParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(FizzParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = FizzParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 128
                self.single_input()

            elif la_ == 2:
                self.state = 129
                self.file_input()

            elif la_ == 3:
                self.state = 130
                self.eval_input()


            self.state = 133
            self.match(FizzParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = FizzParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 135
                self.match(FizzParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 136
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 137
                self.compound_stmt()
                self.state = 138
                self.match(FizzParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = FizzParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 144
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 142
                        self.match(FizzParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 143
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 146 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return FizzParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = FizzParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self.testlist()
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 149
                self.match(FizzParser.LINE_BREAK)
                self.state = 154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def labeled_stmt(self):
            return self.getTypedRuleContext(FizzParser.Labeled_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FizzParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 155
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 156
                self.compound_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 157
                self.labeled_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(FizzParser.LABEL, 0)

        def stmt(self):
            return self.getTypedRuleContext(FizzParser.StmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_labeled_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_stmt" ):
                listener.enterLabeled_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_stmt" ):
                listener.exitLabeled_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_stmt" ):
                return visitor.visitLabeled_stmt(self)
            else:
                return visitor.visitChildren(self)




    def labeled_stmt(self):

        localctx = FizzParser.Labeled_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_labeled_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.match(FizzParser.LABEL)
            self.state = 162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 161
                self.match(FizzParser.LINE_BREAK)


            self.state = 164
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FizzParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_stmt" ):
                listener.enterAny_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_stmt" ):
                listener.exitAny_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_stmt" ):
                return visitor.visitAny_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Flow_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)
        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Init_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INIT(self):
            return self.getToken(FizzParser.INIT, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_stmt" ):
                listener.enterInit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_stmt" ):
                listener.exitInit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_stmt" ):
                return visitor.visitInit_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Invariants_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVARIANTS(self):
            return self.getToken(FizzParser.INVARIANTS, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def invariants_suite(self):
            return self.getTypedRuleContext(FizzParser.Invariants_suiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_stmt" ):
                listener.enterInvariants_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_stmt" ):
                listener.exitInvariants_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_stmt" ):
                return visitor.visitInvariants_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Action_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def actiondef(self):
            return self.getTypedRuleContext(FizzParser.ActiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_stmt" ):
                listener.enterAction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_stmt" ):
                listener.exitAction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_stmt" ):
                return visitor.visitAction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FizzParser.TRY, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(FizzParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FizzParser.IF, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(FizzParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FizzParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(FizzParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(FizzParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Function_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondef(self):
            return self.getTypedRuleContext(FizzParser.FunctiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = FizzParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = FizzParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 166
                self.match(FizzParser.IF)
                self.state = 167
                self.test()
                self.state = 168
                self.match(FizzParser.COLON)
                self.state = 169
                self.suite()
                self.state = 173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 170
                        self.elif_clause() 
                    self.state = 175
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 176
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = FizzParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==42:
                    self.state = 179
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 182
                self.match(FizzParser.WHILE)
                self.state = 183
                self.test()
                self.state = 184
                self.match(FizzParser.COLON)
                self.state = 185
                self.suite()
                pass

            elif la_ == 3:
                localctx = FizzParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0):
                    self.state = 187
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 190
                self.match(FizzParser.FOR)
                self.state = 191
                self.exprlist()
                self.state = 192
                self.match(FizzParser.IN)
                self.state = 193
                self.testlist()
                self.state = 194
                self.match(FizzParser.COLON)
                self.state = 195
                self.suite()
                pass

            elif la_ == 4:
                localctx = FizzParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 197
                self.match(FizzParser.TRY)
                self.state = 198
                self.match(FizzParser.COLON)
                self.state = 199
                self.suite()
                self.state = 212
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 201 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 200
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 203 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                    self.state = 206
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 205
                        self.else_clause()


                    self.state = 209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 208
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 211
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = FizzParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 214
                    self.match(FizzParser.ASYNC)


                self.state = 217
                self.match(FizzParser.WITH)
                self.state = 218
                self.with_item()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56:
                    self.state = 219
                    self.match(FizzParser.COMMA)
                    self.state = 220
                    self.with_item()
                    self.state = 225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 226
                self.match(FizzParser.COLON)
                self.state = 227
                self.suite()
                pass

            elif la_ == 6:
                localctx = FizzParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==79:
                    self.state = 229
                    self.decorator()
                    self.state = 234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 237
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 235
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 236
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = FizzParser.Any_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 239
                self.match(FizzParser.ANY)
                self.state = 240
                self.exprlist()
                self.state = 241
                self.match(FizzParser.IN)
                self.state = 242
                self.testlist()
                self.state = 243
                self.match(FizzParser.COLON)
                self.state = 244
                self.suite()
                pass

            elif la_ == 8:
                localctx = FizzParser.Init_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 246
                self.match(FizzParser.INIT)
                self.state = 247
                self.match(FizzParser.COLON)
                self.state = 248
                self.suite()
                pass

            elif la_ == 9:
                localctx = FizzParser.Invariants_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 249
                self.match(FizzParser.INVARIANTS)
                self.state = 250
                self.match(FizzParser.COLON)
                self.state = 251
                self.invariants_suite()
                pass

            elif la_ == 10:
                localctx = FizzParser.Action_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 252
                self.actiondef()
                pass

            elif la_ == 11:
                localctx = FizzParser.Function_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 253
                self.functiondef()
                pass

            elif la_ == 12:
                localctx = FizzParser.Flow_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 254
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 255
                self.match(FizzParser.COLON)
                self.state = 256
                self.suite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = FizzParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_suite)
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.match(FizzParser.LINE_BREAK)
                self.state = 261
                self.match(FizzParser.INDENT)
                self.state = 263 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 262
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 265 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                self.state = 267
                self.match(FizzParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariants_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def invariant_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Invariant_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Invariant_stmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_invariants_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_suite" ):
                listener.enterInvariants_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_suite" ):
                listener.exitInvariants_suite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_suite" ):
                return visitor.visitInvariants_suite(self)
            else:
                return visitor.visitChildren(self)




    def invariants_suite(self):

        localctx = FizzParser.Invariants_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_invariants_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(FizzParser.LINE_BREAK)
            self.state = 272
            self.match(FizzParser.INDENT)
            self.state = 274 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 273
                self.invariant_stmt()
                self.state = 276 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 24771928406360064) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0)):
                    break

            self.state = 278
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_invariant_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_stmt" ):
                listener.enterInvariant_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_stmt" ):
                listener.exitInvariant_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_stmt" ):
                return visitor.visitInvariant_stmt(self)
            else:
                return visitor.visitChildren(self)




    def invariant_stmt(self):

        localctx = FizzParser.Invariant_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_invariant_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51 or _la==52:
                self.state = 280
                _la = self._input.LA(1)
                if not(_la==51 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.test()
            self.state = 287
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FizzParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(FizzParser.AT)
            self.state = 290
            self.dotted_name(0)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 291
                self.match(FizzParser.OPEN_PAREN)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 630506078287691776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 292
                    self.arglist()


                self.state = 295
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 298
            self.match(FizzParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FizzParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = FizzParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(FizzParser.ELIF)
            self.state = 301
            self.test()
            self.state = 302
            self.match(FizzParser.COLON)
            self.state = 303
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = FizzParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(FizzParser.ELSE)
            self.state = 306
            self.match(FizzParser.COLON)
            self.state = 307
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FizzParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = FizzParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(FizzParser.FINALLY)
            self.state = 310
            self.match(FizzParser.COLON)
            self.state = 311
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FizzParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.test()
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 314
                self.match(FizzParser.AS)
                self.state = 315
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FizzParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FizzParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(FizzParser.EXCEPT)
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016528965304320) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                self.state = 319
                self.test()
                self.state = 330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 320
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 321
                    self.match(FizzParser.COMMA)
                    self.state = 322
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 325
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 326
                    self.match(FizzParser.AS)
                    self.state = 327
                    self.name()
                    self.SetVersion(3);




            self.state = 334
            self.match(FizzParser.COLON)
            self.state = 335
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FizzParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FizzParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(FizzParser.CLASS)
            self.state = 338
            self.name()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 339
                self.match(FizzParser.OPEN_PAREN)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 630506078287691776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 340
                    self.arglist()


                self.state = 343
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 346
            self.match(FizzParser.COLON)
            self.state = 347
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FizzParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(FizzParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FizzParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 349
                self.match(FizzParser.ASYNC)


            self.state = 352
            self.match(FizzParser.DEF)
            self.state = 353
            self.name()
            self.state = 354
            self.match(FizzParser.OPEN_PAREN)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612491198589829120) != 0) or _la==108:
                self.state = 355
                self.typedargslist()


            self.state = 358
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 359
                self.match(FizzParser.ARROW)
                self.state = 360
                self.test()


            self.state = 363
            self.match(FizzParser.COLON)
            self.state = 364
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION(self):
            return self.getToken(FizzParser.ACTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_actiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActiondef" ):
                listener.enterActiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActiondef" ):
                listener.exitActiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActiondef" ):
                return visitor.visitActiondef(self)
            else:
                return visitor.visitChildren(self)




    def actiondef(self):

        localctx = FizzParser.ActiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_actiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 366
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 369
            self.match(FizzParser.ACTION)
            self.state = 370
            self.name()
            self.state = 371
            self.match(FizzParser.COLON)
            self.state = 372
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(FizzParser.FUNC, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_functiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondef" ):
                listener.enterFunctiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondef" ):
                listener.exitFunctiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = FizzParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 374
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 377
            self.match(FizzParser.FUNC)
            self.state = 378
            self.name()
            self.state = 379
            self.match(FizzParser.OPEN_PAREN)
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612491198589829120) != 0) or _la==108:
                self.state = 380
                self.typedargslist()


            self.state = 383
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 384
            self.match(FizzParser.COLON)
            self.state = 385
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FizzParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(FizzParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FizzParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 387
                    self.def_parameters()
                    self.state = 388
                    self.match(FizzParser.COMMA)


                self.state = 402
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 392
                    self.args()
                    self.state = 395
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 393
                        self.match(FizzParser.COMMA)
                        self.state = 394
                        self.def_parameters()


                    self.state = 399
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                    if la_ == 1:
                        self.state = 397
                        self.match(FizzParser.COMMA)
                        self.state = 398
                        self.kwargs()


                    pass
                elif token in [59]:
                    self.state = 401
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 404
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.def_parameters()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 408
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = FizzParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(FizzParser.STAR)
            self.state = 414
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = FizzParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(FizzParser.POWER)
            self.state = 417
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = FizzParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.def_parameter()
            self.state = 424
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 420
                    self.match(FizzParser.COMMA)
                    self.state = 421
                    self.def_parameter() 
                self.state = 426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = FizzParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.named_parameter()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 428
                    self.match(FizzParser.ASSIGN)
                    self.state = 429
                    self.test()


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = FizzParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.name()
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 436
                self.match(FizzParser.COLON)
                self.state = 437
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.SEMI_COLON)
            else:
                return self.getToken(FizzParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FizzParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FizzParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.small_stmt()
            self.state = 445
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 441
                    self.match(FizzParser.SEMI_COLON)
                    self.state = 442
                    self.small_stmt() 
                self.state = 447
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 448
                self.match(FizzParser.SEMI_COLON)


            self.state = 451
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(FizzParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_call_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.NAME)
            else:
                return self.getToken(FizzParser.NAME, i)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call_stmt" ):
                listener.enterFunc_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call_stmt" ):
                listener.exitFunc_call_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call_stmt" ):
                return visitor.visitFunc_call_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(FizzParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(FizzParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(FizzParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(FizzParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(FizzParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(FizzParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.DOT)
            else:
                return self.getToken(FizzParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ELLIPSIS)
            else:
                return self.getToken(FizzParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(FizzParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FizzParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExec_stmt" ):
                return visitor.visitExec_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FizzParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(FizzParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_stmt" ):
                return visitor.visitPrint_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FizzParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = FizzParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                localctx = FizzParser.Func_call_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 453
                    self.match(FizzParser.NAME)
                    self.state = 454
                    self.match(FizzParser.ASSIGN)


                self.state = 457
                self.match(FizzParser.NAME)
                self.state = 458
                self.match(FizzParser.OPEN_PAREN)
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 630506078287691776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 459
                    self.arglist()


                self.state = 462
                self.match(FizzParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = FizzParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.testlist_star_expr()
                self.state = 465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 464
                    self.assign_part()


                pass

            elif la_ == 3:
                localctx = FizzParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 467
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 468
                self.match(FizzParser.PRINT)
                self.state = 491
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 469
                    self.test()
                    self.state = 474
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 470
                            self.match(FizzParser.COMMA)
                            self.state = 471
                            self.test() 
                        self.state = 476
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==56:
                        self.state = 477
                        self.match(FizzParser.COMMA)


                    pass
                elif token in [65]:
                    self.state = 480
                    self.match(FizzParser.RIGHT_SHIFT)
                    self.state = 481
                    self.test()

                    self.state = 484 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 482
                            self.match(FizzParser.COMMA)
                            self.state = 483
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 486 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==56:
                        self.state = 488
                        self.match(FizzParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 4:
                localctx = FizzParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 495
                self.match(FizzParser.DEL)
                self.state = 496
                self.exprlist()
                pass

            elif la_ == 5:
                localctx = FizzParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 497
                self.match(FizzParser.PASS)
                pass

            elif la_ == 6:
                localctx = FizzParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 498
                self.match(FizzParser.BREAK)
                pass

            elif la_ == 7:
                localctx = FizzParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 499
                self.match(FizzParser.CONTINUE)
                pass

            elif la_ == 8:
                localctx = FizzParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 500
                self.match(FizzParser.RETURN)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016528965304320) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 501
                    self.testlist()


                pass

            elif la_ == 9:
                localctx = FizzParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 504
                self.match(FizzParser.RAISE)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016528965304320) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 505
                    self.test()
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==56:
                        self.state = 506
                        self.match(FizzParser.COMMA)
                        self.state = 507
                        self.test()
                        self.state = 510
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56:
                            self.state = 508
                            self.match(FizzParser.COMMA)
                            self.state = 509
                            self.test()






                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 516
                    self.match(FizzParser.FROM)
                    self.state = 517
                    self.test()


                pass

            elif la_ == 10:
                localctx = FizzParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 520
                self.yield_expr()
                pass

            elif la_ == 11:
                localctx = FizzParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 521
                self.match(FizzParser.IMPORT)
                self.state = 522
                self.dotted_as_names()
                pass

            elif la_ == 12:
                localctx = FizzParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 523
                self.match(FizzParser.FROM)
                self.state = 536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==53 or _la==54:
                        self.state = 524
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 529
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 530
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 532 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 531
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 534 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==53 or _la==54):
                            break

                    pass


                self.state = 538
                self.match(FizzParser.IMPORT)
                self.state = 545
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 539
                    self.match(FizzParser.STAR)
                    pass
                elif token in [102]:
                    self.state = 540
                    self.match(FizzParser.OPEN_PAREN)
                    self.state = 541
                    self.import_as_names()
                    self.state = 542
                    self.match(FizzParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 108]:
                    self.state = 544
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                localctx = FizzParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 547
                self.match(FizzParser.GLOBAL)
                self.state = 548
                self.name()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56:
                    self.state = 549
                    self.match(FizzParser.COMMA)
                    self.state = 550
                    self.name()
                    self.state = 555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                localctx = FizzParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 556
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 557
                self.match(FizzParser.EXEC)
                self.state = 558
                self.expr(0)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 559
                    self.match(FizzParser.IN)
                    self.state = 560
                    self.test()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==56:
                        self.state = 561
                        self.match(FizzParser.COMMA)
                        self.state = 562
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 15:
                localctx = FizzParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 569
                self.match(FizzParser.ASSERT)
                self.state = 570
                self.test()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 571
                    self.match(FizzParser.COMMA)
                    self.state = 572
                    self.test()


                pass

            elif la_ == 16:
                localctx = FizzParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 575
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 576
                self.match(FizzParser.NONLOCAL)
                self.state = 577
                self.name()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56:
                    self.state = 578
                    self.match(FizzParser.COMMA)
                    self.state = 579
                    self.name()
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FizzParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_testlist_star_expr)
        try:
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 591
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 589
                            self.test()
                            pass
                        elif token in [55]:
                            self.state = 590
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 593
                        self.match(FizzParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 597 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 599
                    self.test()

                elif la_ == 2:
                    self.state = 600
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FizzParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(FizzParser.STAR)
            self.state = 607
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ASSIGN)
            else:
                return self.getToken(FizzParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(FizzParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FizzParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FizzParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FizzParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FizzParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FizzParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FizzParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FizzParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FizzParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FizzParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FizzParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = FizzParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(FizzParser.ASSIGN)
                self.state = 623
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 610
                    self.testlist_star_expr()
                    self.state = 615
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 611
                            self.match(FizzParser.ASSIGN)
                            self.state = 612
                            self.testlist_star_expr() 
                        self.state = 617
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==60:
                        self.state = 618
                        self.match(FizzParser.ASSIGN)
                        self.state = 619
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 622
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 626
                self.match(FizzParser.COLON)
                self.state = 627
                self.test()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 628
                    self.match(FizzParser.ASSIGN)
                    self.state = 629
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 634
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 637
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 635
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 636
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FizzParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.expr(0)
            self.state = 646
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 642
                    self.match(FizzParser.COMMA)
                    self.state = 643
                    self.expr(0) 
                self.state = 648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 649
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FizzParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.import_as_name()
            self.state = 657
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 653
                    self.match(FizzParser.COMMA)
                    self.state = 654
                    self.import_as_name() 
                self.state = 659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 660
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FizzParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.name()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 664
                self.match(FizzParser.AS)
                self.state = 665
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FizzParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.dotted_as_name()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==56:
                self.state = 669
                self.match(FizzParser.COMMA)
                self.state = 670
                self.dotted_as_name()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FizzParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.dotted_name(0)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 677
                self.match(FizzParser.AS)
                self.state = 678
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(FizzParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FizzParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FizzParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.logical_test(0)
                self.state = 687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 682
                    self.match(FizzParser.IF)
                    self.state = 683
                    self.logical_test(0)
                    self.state = 684
                    self.match(FizzParser.ELSE)
                    self.state = 685
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.match(FizzParser.LAMBDA)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612491198589829120) != 0) or _la==108:
                    self.state = 690
                    self.varargslist()


                self.state = 693
                self.match(FizzParser.COLON)
                self.state = 694
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(FizzParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(FizzParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FizzParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 697
                    self.vardef_parameters()
                    self.state = 698
                    self.match(FizzParser.COMMA)


                self.state = 712
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 702
                    self.varargs()
                    self.state = 705
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        self.state = 703
                        self.match(FizzParser.COMMA)
                        self.state = 704
                        self.vardef_parameters()


                    self.state = 709
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        self.state = 707
                        self.match(FizzParser.COMMA)
                        self.state = 708
                        self.varkwargs()


                    pass
                elif token in [59]:
                    self.state = 711
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 714
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.vardef_parameters()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 718
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = FizzParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.vardef_parameter()
            self.state = 728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 724
                    self.match(FizzParser.COMMA)
                    self.state = 725
                    self.vardef_parameter() 
                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = FizzParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.name()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 732
                    self.match(FizzParser.ASSIGN)
                    self.state = 733
                    self.test()


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = FizzParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(FizzParser.STAR)
            self.state = 740
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = FizzParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(FizzParser.POWER)
            self.state = 743
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(FizzParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(FizzParser.AND, 0)

        def OR(self):
            return self.getToken(FizzParser.OR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.state = 746
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 747
                self.match(FizzParser.NOT)
                self.state = 748
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 757
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 751
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 752
                        localctx.op = self.match(FizzParser.AND)
                        self.state = 753
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 754
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 755
                        localctx.op = self.match(FizzParser.OR)
                        self.state = 756
                        self.logical_test(2)
                        pass

             
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(FizzParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FizzParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FizzParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FizzParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FizzParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FizzParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def IS(self):
            return self.getToken(FizzParser.IS, 0)

        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 765
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 781
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [72]:
                        self.state = 766
                        self.match(FizzParser.LESS_THAN)
                        pass
                    elif token in [73]:
                        self.state = 767
                        self.match(FizzParser.GREATER_THAN)
                        pass
                    elif token in [74]:
                        self.state = 768
                        self.match(FizzParser.EQUALS)
                        pass
                    elif token in [75]:
                        self.state = 769
                        self.match(FizzParser.GT_EQ)
                        pass
                    elif token in [76]:
                        self.state = 770
                        self.match(FizzParser.LT_EQ)
                        pass
                    elif token in [77]:
                        self.state = 771
                        self.match(FizzParser.NOT_EQ_1)
                        pass
                    elif token in [78]:
                        self.state = 772
                        self.match(FizzParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 773
                            localctx.optional = self.match(FizzParser.NOT)


                        self.state = 776
                        self.match(FizzParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 777
                        self.match(FizzParser.IS)
                        self.state = 779
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 778
                            localctx.optional = self.match(FizzParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 783
                    self.comparison(3) 
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(FizzParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FizzParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FizzParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def ADD(self):
            return self.getToken(FizzParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FizzParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def DIV(self):
            return self.getToken(FizzParser.DIV, 0)

        def MOD(self):
            return self.getToken(FizzParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FizzParser.IDIV, 0)

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FizzParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FizzParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FizzParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FizzParser.OR_OP, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 790
                    self.match(FizzParser.AWAIT)


                self.state = 793
                self.atom()
                self.state = 797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 794
                        self.trailer() 
                    self.state = 799
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                pass

            elif la_ == 2:
                self.state = 800
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 801
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 827
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 825
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 804
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 805
                        localctx.op = self.match(FizzParser.POWER)
                        self.state = 806
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 807
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 808
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 809
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 810
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 811
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==67):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 812
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 813
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 814
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==64 or _la==65):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 815
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 816
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 817
                        localctx.op = self.match(FizzParser.AND_OP)
                        self.state = 818
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 819
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 820
                        localctx.op = self.match(FizzParser.XOR)
                        self.state = 821
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 822
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 823
                        localctx.op = self.match(FizzParser.OR_OP)
                        self.state = 824
                        self.expr(2)
                        pass

             
                self.state = 829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(FizzParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FizzParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FizzParser.DictorsetmakerContext,0)


        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(FizzParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NONE(self):
            return self.getToken(FizzParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.STRING)
            else:
                return self.getToken(FizzParser.STRING, i)

        def getRuleIndex(self):
            return FizzParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FizzParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.match(FizzParser.OPEN_PAREN)
                self.state = 833
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 831
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 832
                    self.testlist_comp()
                    pass
                elif token in [103]:
                    pass
                else:
                    pass
                self.state = 835
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 836
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 837
                    self.testlist_comp()


                self.state = 840
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 841
                self.match(FizzParser.OPEN_BRACE)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 630506078287691776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 842
                    self.dictorsetmaker()


                self.state = 845
                self.match(FizzParser.CLOSE_BRACE)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 846
                self.match(FizzParser.ELLIPSIS)
                pass
            elif token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 5)
                self.state = 847
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 848
                self.match(FizzParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 7)
                self.state = 849
                self.match(FizzParser.EXEC)
                pass
            elif token in [67, 96, 97, 98, 99, 100, 101]:
                self.enterOuterAlt(localctx, 8)
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 850
                    self.match(FizzParser.MINUS)


                self.state = 853
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 9)
                self.state = 854
                self.match(FizzParser.NONE)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 10)
                self.state = 856 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 855
                        self.match(FizzParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 858 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COLON)
            else:
                return self.getToken(FizzParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.POWER)
            else:
                return self.getToken(FizzParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FizzParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 862
                    self.test()
                    self.state = 863
                    self.match(FizzParser.COLON)
                    self.state = 864
                    self.test()
                    pass
                elif token in [59]:
                    self.state = 866
                    self.match(FizzParser.POWER)
                    self.state = 867
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 870
                        self.match(FizzParser.COMMA)
                        self.state = 877
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 871
                            self.test()
                            self.state = 872
                            self.match(FizzParser.COLON)
                            self.state = 873
                            self.test()
                            pass
                        elif token in [59]:
                            self.state = 875
                            self.match(FizzParser.POWER)
                            self.state = 876
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 884
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.test()
                self.state = 888
                self.match(FizzParser.COLON)
                self.state = 889
                self.test()
                self.state = 890
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 892
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FizzParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.state = 895
                self.test()
                pass
            elif token in [55]:
                self.state = 896
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 899
                self.comp_for()
                pass
            elif token in [56, 103, 105, 107]:
                self.state = 907
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 900
                        self.match(FizzParser.COMMA)
                        self.state = 903
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 901
                            self.test()
                            pass
                        elif token in [55]:
                            self.state = 902
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 909
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 910
                    self.match(FizzParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FizzParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.test()
            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 916
                    self.match(FizzParser.COMMA)
                    self.state = 917
                    self.test() 
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 923
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 929
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 930
                    self.match(FizzParser.DOT)
                    self.state = 931
                    self.name() 
                self.state = 936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FizzParser.NAME, 0)

        def TRUE(self):
            return self.getToken(FizzParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FizzParser.FALSE, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FizzParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            _la = self._input.LA(1)
            if not(_la==39 or _la==40 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(FizzParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(FizzParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(FizzParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FizzParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_number)
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96, 97, 98, 99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                self.integer()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.match(FizzParser.IMAG_NUMBER)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.match(FizzParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(FizzParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(FizzParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(FizzParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(FizzParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = FizzParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FizzParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FizzParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FizzParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(FizzParser.YIELD)
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016528965304448) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                self.state = 947
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FizzParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_yield_arg)
        try:
            self.state = 953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.match(FizzParser.FROM)
                self.state = 951
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 952
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(FizzParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FizzParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_trailer)
        try:
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(FizzParser.DOT)
                self.state = 956
                self.name()
                self.state = 958
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 957
                    self.arguments()


                pass
            elif token in [102, 106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FizzParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = FizzParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.match(FizzParser.OPEN_PAREN)
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 630506078287691776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 964
                    self.arglist()


                self.state = 967
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 968
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 969
                self.subscriptlist()
                self.state = 970
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FizzParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FizzParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.argument()
            self.state = 979
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 975
                    self.match(FizzParser.COMMA)
                    self.state = 976
                    self.argument() 
                self.state = 981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 982
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FizzParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 66, 67, 71, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.test()
                self.state = 989
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 986
                    self.comp_for()
                    pass
                elif token in [60]:
                    self.state = 987
                    self.match(FizzParser.ASSIGN)
                    self.state = 988
                    self.test()
                    pass
                elif token in [56, 103]:
                    pass
                else:
                    pass
                pass
            elif token in [55, 59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                _la = self._input.LA(1)
                if not(_la==55 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 992
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(FizzParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FizzParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.subscript()
            self.state = 1000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 996
                    self.match(FizzParser.COMMA)
                    self.state = 997
                    self.subscript() 
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 1003
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FizzParser.SliceopContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = FizzParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.match(FizzParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.test()
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 1008
                    self.match(FizzParser.COLON)
                    self.state = 1010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016528965304320) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                        self.state = 1009
                        self.test()


                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 1012
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1017
                self.match(FizzParser.COLON)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016528965304320) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                    self.state = 1018
                    self.test()


                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 1021
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FizzParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(FizzParser.COLON)
            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016528965304320) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 5909069692963) != 0):
                self.state = 1027
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(FizzParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FizzParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(FizzParser.FOR)
            self.state = 1031
            self.exprlist()
            self.state = 1032
            self.match(FizzParser.IN)
            self.state = 1033
            self.logical_test(0)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 1034
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FizzParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 1043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                self.match(FizzParser.IF)
                self.state = 1039
                self.test()
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 1040
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[15] = self.except_clause_sempred
        self._predicates[27] = self.small_stmt_sempred
        self._predicates[30] = self.assign_part_sempred
        self._predicates[42] = self.logical_test_sempred
        self._predicates[43] = self.comparison_sempred
        self._predicates[44] = self.expr_sempred
        self._predicates[49] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




