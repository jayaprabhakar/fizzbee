# Generated from FizzParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,112,1044,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,3,0,130,8,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,139,8,1,1,2,1,2,4,2,143,8,2,11,2,12,
        2,144,1,3,1,3,5,3,149,8,3,10,3,12,3,152,9,3,1,4,1,4,3,4,156,8,4,
        1,5,1,5,1,5,1,5,1,5,5,5,163,8,5,10,5,12,5,166,9,5,1,5,3,5,169,8,
        5,1,5,3,5,172,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,180,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,193,8,5,11,5,12,5,194,1,5,
        3,5,198,8,5,1,5,3,5,201,8,5,1,5,3,5,204,8,5,1,5,3,5,207,8,5,1,5,
        1,5,1,5,1,5,5,5,213,8,5,10,5,12,5,216,9,5,1,5,1,5,1,5,1,5,5,5,222,
        8,5,10,5,12,5,225,9,5,1,5,1,5,3,5,229,8,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,249,8,5,1,
        6,1,6,1,6,1,6,4,6,255,8,6,11,6,12,6,256,1,6,1,6,3,6,261,8,6,1,7,
        1,7,1,7,4,7,266,8,7,11,7,12,7,267,1,7,1,7,1,8,5,8,273,8,8,10,8,12,
        8,276,9,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,285,8,9,1,9,3,9,288,8,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,3,13,308,8,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,322,8,14,3,14,324,8,14,1,
        14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,333,8,15,1,15,3,15,336,8,15,
        1,15,1,15,1,15,1,16,3,16,342,8,16,1,16,1,16,1,16,1,16,3,16,348,8,
        16,1,16,1,16,1,16,3,16,353,8,16,1,16,1,16,1,16,1,17,3,17,359,8,17,
        1,17,1,17,1,17,1,17,1,17,1,18,3,18,367,8,18,1,18,1,18,1,18,1,18,
        3,18,373,8,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,382,8,19,1,
        19,1,19,1,19,3,19,387,8,19,1,19,1,19,3,19,391,8,19,1,19,3,19,394,
        8,19,1,19,3,19,397,8,19,1,19,1,19,3,19,401,8,19,3,19,403,8,19,1,
        20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,5,22,414,8,22,10,22,12,
        22,417,9,22,1,23,1,23,1,23,3,23,422,8,23,1,23,3,23,425,8,23,1,24,
        1,24,1,24,3,24,430,8,24,1,25,1,25,1,25,5,25,435,8,25,10,25,12,25,
        438,9,25,1,25,3,25,441,8,25,1,25,1,25,1,26,1,26,3,26,447,8,26,1,
        26,1,26,1,26,3,26,452,8,26,1,26,1,26,1,26,3,26,457,8,26,1,26,1,26,
        1,26,1,26,1,26,5,26,464,8,26,10,26,12,26,467,9,26,1,26,3,26,470,
        8,26,1,26,1,26,1,26,1,26,4,26,476,8,26,11,26,12,26,477,1,26,3,26,
        481,8,26,3,26,483,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,3,26,494,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,502,8,26,3,26,
        504,8,26,3,26,506,8,26,1,26,1,26,3,26,510,8,26,1,26,1,26,1,26,1,
        26,1,26,5,26,517,8,26,10,26,12,26,520,9,26,1,26,1,26,4,26,524,8,
        26,11,26,12,26,525,3,26,528,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,3,26,537,8,26,1,26,1,26,1,26,1,26,5,26,543,8,26,10,26,12,26,546,
        9,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,555,8,26,3,26,557,8,
        26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,565,8,26,1,26,1,26,1,26,1,
        26,1,26,5,26,572,8,26,10,26,12,26,575,9,26,1,26,1,26,3,26,579,8,
        26,1,27,1,27,3,27,583,8,27,1,27,1,27,4,27,587,8,27,11,27,12,27,588,
        1,27,1,27,3,27,593,8,27,1,27,3,27,596,8,27,1,28,1,28,1,28,1,29,1,
        29,1,29,1,29,5,29,605,8,29,10,29,12,29,608,9,29,1,29,1,29,3,29,612,
        8,29,1,29,3,29,615,8,29,1,29,1,29,1,29,1,29,1,29,3,29,622,8,29,1,
        29,1,29,1,29,1,29,1,29,3,29,629,8,29,3,29,631,8,29,1,30,1,30,1,30,
        5,30,636,8,30,10,30,12,30,639,9,30,1,30,3,30,642,8,30,1,31,1,31,
        1,31,5,31,647,8,31,10,31,12,31,650,9,31,1,31,3,31,653,8,31,1,32,
        1,32,1,32,3,32,658,8,32,1,33,1,33,1,33,5,33,663,8,33,10,33,12,33,
        666,9,33,1,34,1,34,1,34,3,34,671,8,34,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,679,8,35,1,35,1,35,3,35,683,8,35,1,35,1,35,3,35,687,8,35,
        1,36,1,36,1,36,3,36,692,8,36,1,36,1,36,1,36,3,36,697,8,36,1,36,1,
        36,3,36,701,8,36,1,36,3,36,704,8,36,1,36,3,36,707,8,36,1,36,1,36,
        3,36,711,8,36,3,36,713,8,36,1,37,1,37,1,37,5,37,718,8,37,10,37,12,
        37,721,9,37,1,38,1,38,1,38,3,38,726,8,38,1,38,3,38,729,8,38,1,39,
        1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,741,8,41,1,41,
        1,41,1,41,1,41,1,41,1,41,5,41,749,8,41,10,41,12,41,752,9,41,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,766,
        8,42,1,42,1,42,1,42,3,42,771,8,42,3,42,773,8,42,1,42,5,42,776,8,
        42,10,42,12,42,779,9,42,1,43,1,43,3,43,783,8,43,1,43,1,43,5,43,787,
        8,43,10,43,12,43,790,9,43,1,43,1,43,3,43,794,8,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,5,43,817,8,43,10,43,12,43,820,9,43,1,44,
        1,44,1,44,3,44,825,8,44,1,44,1,44,1,44,3,44,830,8,44,1,44,1,44,1,
        44,3,44,835,8,44,1,44,1,44,1,44,1,44,3,44,841,8,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,3,44,850,8,44,1,44,1,44,1,44,4,44,855,8,44,11,
        44,12,44,856,3,44,859,8,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,867,
        8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,876,8,45,5,45,878,8,
        45,10,45,12,45,881,9,45,1,45,3,45,884,8,45,1,45,1,45,1,45,1,45,1,
        45,1,45,3,45,892,8,45,1,46,1,46,3,46,896,8,46,1,46,1,46,1,46,1,46,
        3,46,902,8,46,5,46,904,8,46,10,46,12,46,907,9,46,1,46,3,46,910,8,
        46,3,46,912,8,46,1,47,1,47,1,47,5,47,917,8,47,10,47,12,47,920,9,
        47,1,47,3,47,923,8,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,931,8,48,
        10,48,12,48,934,9,48,1,49,1,49,1,50,1,50,1,50,3,50,941,8,50,1,51,
        1,51,1,52,1,52,3,52,947,8,52,1,53,1,53,1,53,3,53,952,8,53,1,54,1,
        54,1,54,3,54,957,8,54,1,54,3,54,960,8,54,1,55,1,55,3,55,964,8,55,
        1,55,1,55,1,55,1,55,1,55,3,55,971,8,55,1,56,1,56,1,56,5,56,976,8,
        56,10,56,12,56,979,9,56,1,56,3,56,982,8,56,1,57,1,57,1,57,1,57,3,
        57,988,8,57,1,57,1,57,3,57,992,8,57,1,58,1,58,1,58,5,58,997,8,58,
        10,58,12,58,1000,9,58,1,58,3,58,1003,8,58,1,59,1,59,1,59,1,59,3,
        59,1009,8,59,1,59,3,59,1012,8,59,3,59,1014,8,59,1,59,1,59,3,59,1018,
        8,59,1,59,3,59,1021,8,59,3,59,1023,8,59,1,60,1,60,3,60,1027,8,60,
        1,61,1,61,1,61,1,61,1,61,3,61,1034,8,61,1,62,1,62,1,62,1,62,3,62,
        1040,8,62,3,62,1042,8,62,1,62,0,4,82,84,86,96,63,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,0,14,1,0,41,42,1,
        0,41,43,1,0,41,44,1,0,51,52,1,1,3,3,1,0,53,54,1,0,82,94,2,0,67,68,
        72,72,3,0,56,56,69,71,80,80,1,0,67,68,1,0,65,66,2,0,39,40,108,108,
        1,0,96,99,2,0,56,56,60,60,1194,0,129,1,0,0,0,2,138,1,0,0,0,4,142,
        1,0,0,0,6,146,1,0,0,0,8,155,1,0,0,0,10,248,1,0,0,0,12,260,1,0,0,
        0,14,262,1,0,0,0,16,274,1,0,0,0,18,280,1,0,0,0,20,291,1,0,0,0,22,
        296,1,0,0,0,24,300,1,0,0,0,26,304,1,0,0,0,28,309,1,0,0,0,30,328,
        1,0,0,0,32,341,1,0,0,0,34,358,1,0,0,0,36,366,1,0,0,0,38,402,1,0,
        0,0,40,404,1,0,0,0,42,407,1,0,0,0,44,410,1,0,0,0,46,424,1,0,0,0,
        48,426,1,0,0,0,50,431,1,0,0,0,52,578,1,0,0,0,54,595,1,0,0,0,56,597,
        1,0,0,0,58,630,1,0,0,0,60,632,1,0,0,0,62,643,1,0,0,0,64,654,1,0,
        0,0,66,659,1,0,0,0,68,667,1,0,0,0,70,686,1,0,0,0,72,712,1,0,0,0,
        74,714,1,0,0,0,76,728,1,0,0,0,78,730,1,0,0,0,80,733,1,0,0,0,82,740,
        1,0,0,0,84,753,1,0,0,0,86,793,1,0,0,0,88,858,1,0,0,0,90,891,1,0,
        0,0,92,895,1,0,0,0,94,913,1,0,0,0,96,924,1,0,0,0,98,935,1,0,0,0,
        100,940,1,0,0,0,102,942,1,0,0,0,104,944,1,0,0,0,106,951,1,0,0,0,
        108,959,1,0,0,0,110,970,1,0,0,0,112,972,1,0,0,0,114,991,1,0,0,0,
        116,993,1,0,0,0,118,1022,1,0,0,0,120,1024,1,0,0,0,122,1028,1,0,0,
        0,124,1041,1,0,0,0,126,130,3,2,1,0,127,130,3,4,2,0,128,130,3,6,3,
        0,129,126,1,0,0,0,129,127,1,0,0,0,129,128,1,0,0,0,129,130,1,0,0,
        0,130,131,1,0,0,0,131,132,5,0,0,1,132,1,1,0,0,0,133,139,5,3,0,0,
        134,139,3,50,25,0,135,136,3,10,5,0,136,137,5,3,0,0,137,139,1,0,0,
        0,138,133,1,0,0,0,138,134,1,0,0,0,138,135,1,0,0,0,139,3,1,0,0,0,
        140,143,5,3,0,0,141,143,3,8,4,0,142,140,1,0,0,0,142,141,1,0,0,0,
        143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,5,1,0,0,0,146,
        150,3,94,47,0,147,149,5,3,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,
        148,1,0,0,0,150,151,1,0,0,0,151,7,1,0,0,0,152,150,1,0,0,0,153,156,
        3,50,25,0,154,156,3,10,5,0,155,153,1,0,0,0,155,154,1,0,0,0,156,9,
        1,0,0,0,157,158,5,13,0,0,158,159,3,70,35,0,159,160,5,58,0,0,160,
        164,3,12,6,0,161,163,3,20,10,0,162,161,1,0,0,0,163,166,1,0,0,0,164,
        162,1,0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,167,
        169,3,22,11,0,168,167,1,0,0,0,168,169,1,0,0,0,169,249,1,0,0,0,170,
        172,7,0,0,0,171,170,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,
        174,5,16,0,0,174,175,3,70,35,0,175,176,5,58,0,0,176,177,3,12,6,0,
        177,249,1,0,0,0,178,180,7,1,0,0,179,178,1,0,0,0,179,180,1,0,0,0,
        180,181,1,0,0,0,181,182,5,17,0,0,182,183,3,60,30,0,183,184,5,18,
        0,0,184,185,3,94,47,0,185,186,5,58,0,0,186,187,3,12,6,0,187,249,
        1,0,0,0,188,189,5,19,0,0,189,190,5,58,0,0,190,203,3,12,6,0,191,193,
        3,28,14,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,
        1,0,0,0,195,197,1,0,0,0,196,198,3,22,11,0,197,196,1,0,0,0,197,198,
        1,0,0,0,198,200,1,0,0,0,199,201,3,24,12,0,200,199,1,0,0,0,200,201,
        1,0,0,0,201,204,1,0,0,0,202,204,3,24,12,0,203,192,1,0,0,0,203,202,
        1,0,0,0,204,249,1,0,0,0,205,207,5,35,0,0,206,205,1,0,0,0,206,207,
        1,0,0,0,207,208,1,0,0,0,208,209,5,22,0,0,209,214,3,26,13,0,210,211,
        5,57,0,0,211,213,3,26,13,0,212,210,1,0,0,0,213,216,1,0,0,0,214,212,
        1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,
        5,58,0,0,218,219,3,12,6,0,219,249,1,0,0,0,220,222,3,18,9,0,221,220,
        1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,228,
        1,0,0,0,225,223,1,0,0,0,226,229,3,30,15,0,227,229,3,32,16,0,228,
        226,1,0,0,0,228,227,1,0,0,0,229,249,1,0,0,0,230,231,5,45,0,0,231,
        232,3,60,30,0,232,233,5,18,0,0,233,234,3,94,47,0,234,235,5,58,0,
        0,235,236,3,12,6,0,236,249,1,0,0,0,237,238,5,49,0,0,238,239,5,58,
        0,0,239,249,3,12,6,0,240,241,5,50,0,0,241,242,5,58,0,0,242,249,3,
        14,7,0,243,249,3,34,17,0,244,249,3,36,18,0,245,246,7,2,0,0,246,247,
        5,58,0,0,247,249,3,12,6,0,248,157,1,0,0,0,248,171,1,0,0,0,248,179,
        1,0,0,0,248,188,1,0,0,0,248,206,1,0,0,0,248,223,1,0,0,0,248,230,
        1,0,0,0,248,237,1,0,0,0,248,240,1,0,0,0,248,243,1,0,0,0,248,244,
        1,0,0,0,248,245,1,0,0,0,249,11,1,0,0,0,250,261,3,50,25,0,251,252,
        5,3,0,0,252,254,5,1,0,0,253,255,3,8,4,0,254,253,1,0,0,0,255,256,
        1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,0,258,259,
        5,2,0,0,259,261,1,0,0,0,260,250,1,0,0,0,260,251,1,0,0,0,261,13,1,
        0,0,0,262,263,5,3,0,0,263,265,5,1,0,0,264,266,3,16,8,0,265,264,1,
        0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,269,1,
        0,0,0,269,270,5,2,0,0,270,15,1,0,0,0,271,273,7,3,0,0,272,271,1,0,
        0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,
        0,0,276,274,1,0,0,0,277,278,3,70,35,0,278,279,7,4,0,0,279,17,1,0,
        0,0,280,281,5,80,0,0,281,287,3,96,48,0,282,284,5,102,0,0,283,285,
        3,112,56,0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,288,
        5,103,0,0,287,282,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,
        5,3,0,0,290,19,1,0,0,0,291,292,5,14,0,0,292,293,3,70,35,0,293,294,
        5,58,0,0,294,295,3,12,6,0,295,21,1,0,0,0,296,297,5,15,0,0,297,298,
        5,58,0,0,298,299,3,12,6,0,299,23,1,0,0,0,300,301,5,21,0,0,301,302,
        5,58,0,0,302,303,3,12,6,0,303,25,1,0,0,0,304,307,3,70,35,0,305,306,
        5,10,0,0,306,308,3,86,43,0,307,305,1,0,0,0,307,308,1,0,0,0,308,27,
        1,0,0,0,309,323,5,23,0,0,310,321,3,70,35,0,311,312,4,14,0,0,312,
        313,5,57,0,0,313,314,3,98,49,0,314,315,6,14,-1,0,315,322,1,0,0,0,
        316,317,4,14,1,0,317,318,5,10,0,0,318,319,3,98,49,0,319,320,6,14,
        -1,0,320,322,1,0,0,0,321,311,1,0,0,0,321,316,1,0,0,0,321,322,1,0,
        0,0,322,324,1,0,0,0,323,310,1,0,0,0,323,324,1,0,0,0,324,325,1,0,
        0,0,325,326,5,58,0,0,326,327,3,12,6,0,327,29,1,0,0,0,328,329,5,29,
        0,0,329,335,3,98,49,0,330,332,5,102,0,0,331,333,3,112,56,0,332,331,
        1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,336,5,103,0,0,335,330,
        1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,5,58,0,0,338,339,
        3,12,6,0,339,31,1,0,0,0,340,342,5,35,0,0,341,340,1,0,0,0,341,342,
        1,0,0,0,342,343,1,0,0,0,343,344,5,4,0,0,344,345,3,98,49,0,345,347,
        5,102,0,0,346,348,3,38,19,0,347,346,1,0,0,0,347,348,1,0,0,0,348,
        349,1,0,0,0,349,352,5,103,0,0,350,351,5,81,0,0,351,353,3,70,35,0,
        352,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,355,5,58,0,0,
        355,356,3,12,6,0,356,33,1,0,0,0,357,359,7,2,0,0,358,357,1,0,0,0,
        358,359,1,0,0,0,359,360,1,0,0,0,360,361,5,46,0,0,361,362,3,98,49,
        0,362,363,5,58,0,0,363,364,3,12,6,0,364,35,1,0,0,0,365,367,7,2,0,
        0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,369,5,47,0,
        0,369,370,3,98,49,0,370,372,5,102,0,0,371,373,3,38,19,0,372,371,
        1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,375,5,103,0,0,375,376,
        5,58,0,0,376,377,3,12,6,0,377,37,1,0,0,0,378,379,3,44,22,0,379,380,
        5,57,0,0,380,382,1,0,0,0,381,378,1,0,0,0,381,382,1,0,0,0,382,393,
        1,0,0,0,383,386,3,40,20,0,384,385,5,57,0,0,385,387,3,44,22,0,386,
        384,1,0,0,0,386,387,1,0,0,0,387,390,1,0,0,0,388,389,5,57,0,0,389,
        391,3,42,21,0,390,388,1,0,0,0,390,391,1,0,0,0,391,394,1,0,0,0,392,
        394,3,42,21,0,393,383,1,0,0,0,393,392,1,0,0,0,394,396,1,0,0,0,395,
        397,5,57,0,0,396,395,1,0,0,0,396,397,1,0,0,0,397,403,1,0,0,0,398,
        400,3,44,22,0,399,401,5,57,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,
        403,1,0,0,0,402,381,1,0,0,0,402,398,1,0,0,0,403,39,1,0,0,0,404,405,
        5,56,0,0,405,406,3,48,24,0,406,41,1,0,0,0,407,408,5,60,0,0,408,409,
        3,48,24,0,409,43,1,0,0,0,410,415,3,46,23,0,411,412,5,57,0,0,412,
        414,3,46,23,0,413,411,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,
        416,1,0,0,0,416,45,1,0,0,0,417,415,1,0,0,0,418,421,3,48,24,0,419,
        420,5,61,0,0,420,422,3,70,35,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
        425,1,0,0,0,423,425,5,56,0,0,424,418,1,0,0,0,424,423,1,0,0,0,425,
        47,1,0,0,0,426,429,3,98,49,0,427,428,5,58,0,0,428,430,3,70,35,0,
        429,427,1,0,0,0,429,430,1,0,0,0,430,49,1,0,0,0,431,436,3,52,26,0,
        432,433,5,59,0,0,433,435,3,52,26,0,434,432,1,0,0,0,435,438,1,0,0,
        0,436,434,1,0,0,0,436,437,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,
        0,439,441,5,59,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,
        0,442,443,7,4,0,0,443,51,1,0,0,0,444,445,5,108,0,0,445,447,5,61,
        0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,5,108,
        0,0,449,451,5,102,0,0,450,452,3,112,56,0,451,450,1,0,0,0,451,452,
        1,0,0,0,452,453,1,0,0,0,453,579,5,103,0,0,454,456,3,54,27,0,455,
        457,3,58,29,0,456,455,1,0,0,0,456,457,1,0,0,0,457,579,1,0,0,0,458,
        459,4,26,2,0,459,482,5,37,0,0,460,465,3,70,35,0,461,462,5,57,0,0,
        462,464,3,70,35,0,463,461,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,
        0,465,466,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,468,470,5,57,0,
        0,469,468,1,0,0,0,469,470,1,0,0,0,470,483,1,0,0,0,471,472,5,66,0,
        0,472,475,3,70,35,0,473,474,5,57,0,0,474,476,3,70,35,0,475,473,1,
        0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,480,1,
        0,0,0,479,481,5,57,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,483,1,
        0,0,0,482,460,1,0,0,0,482,471,1,0,0,0,483,484,1,0,0,0,484,485,6,
        26,-1,0,485,579,1,0,0,0,486,487,5,31,0,0,487,579,3,60,30,0,488,579,
        5,32,0,0,489,579,5,34,0,0,490,579,5,33,0,0,491,493,5,5,0,0,492,494,
        3,94,47,0,493,492,1,0,0,0,493,494,1,0,0,0,494,579,1,0,0,0,495,505,
        5,6,0,0,496,503,3,70,35,0,497,498,5,57,0,0,498,501,3,70,35,0,499,
        500,5,57,0,0,500,502,3,70,35,0,501,499,1,0,0,0,501,502,1,0,0,0,502,
        504,1,0,0,0,503,497,1,0,0,0,503,504,1,0,0,0,504,506,1,0,0,0,505,
        496,1,0,0,0,505,506,1,0,0,0,506,509,1,0,0,0,507,508,5,7,0,0,508,
        510,3,70,35,0,509,507,1,0,0,0,509,510,1,0,0,0,510,579,1,0,0,0,511,
        579,3,104,52,0,512,513,5,8,0,0,513,579,3,66,33,0,514,527,5,7,0,0,
        515,517,7,5,0,0,516,515,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,
        518,519,1,0,0,0,519,521,1,0,0,0,520,518,1,0,0,0,521,528,3,96,48,
        0,522,524,7,5,0,0,523,522,1,0,0,0,524,525,1,0,0,0,525,523,1,0,0,
        0,525,526,1,0,0,0,526,528,1,0,0,0,527,518,1,0,0,0,527,523,1,0,0,
        0,528,529,1,0,0,0,529,536,5,8,0,0,530,537,5,56,0,0,531,532,5,102,
        0,0,532,533,3,62,31,0,533,534,5,103,0,0,534,537,1,0,0,0,535,537,
        3,62,31,0,536,530,1,0,0,0,536,531,1,0,0,0,536,535,1,0,0,0,537,579,
        1,0,0,0,538,539,5,11,0,0,539,544,3,98,49,0,540,541,5,57,0,0,541,
        543,3,98,49,0,542,540,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,
        545,1,0,0,0,545,579,1,0,0,0,546,544,1,0,0,0,547,548,4,26,3,0,548,
        549,5,38,0,0,549,556,3,86,43,0,550,551,5,18,0,0,551,554,3,70,35,
        0,552,553,5,57,0,0,553,555,3,70,35,0,554,552,1,0,0,0,554,555,1,0,
        0,0,555,557,1,0,0,0,556,550,1,0,0,0,556,557,1,0,0,0,557,558,1,0,
        0,0,558,559,6,26,-1,0,559,579,1,0,0,0,560,561,5,12,0,0,561,564,3,
        70,35,0,562,563,5,57,0,0,563,565,3,70,35,0,564,562,1,0,0,0,564,565,
        1,0,0,0,565,579,1,0,0,0,566,567,4,26,4,0,567,568,5,9,0,0,568,573,
        3,98,49,0,569,570,5,57,0,0,570,572,3,98,49,0,571,569,1,0,0,0,572,
        575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,0,575,
        573,1,0,0,0,576,577,6,26,-1,0,577,579,1,0,0,0,578,446,1,0,0,0,578,
        454,1,0,0,0,578,458,1,0,0,0,578,486,1,0,0,0,578,488,1,0,0,0,578,
        489,1,0,0,0,578,490,1,0,0,0,578,491,1,0,0,0,578,495,1,0,0,0,578,
        511,1,0,0,0,578,512,1,0,0,0,578,514,1,0,0,0,578,538,1,0,0,0,578,
        547,1,0,0,0,578,560,1,0,0,0,578,566,1,0,0,0,579,53,1,0,0,0,580,583,
        3,70,35,0,581,583,3,56,28,0,582,580,1,0,0,0,582,581,1,0,0,0,583,
        584,1,0,0,0,584,585,5,57,0,0,585,587,1,0,0,0,586,582,1,0,0,0,587,
        588,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,0,590,
        593,3,70,35,0,591,593,3,56,28,0,592,590,1,0,0,0,592,591,1,0,0,0,
        592,593,1,0,0,0,593,596,1,0,0,0,594,596,3,94,47,0,595,586,1,0,0,
        0,595,594,1,0,0,0,596,55,1,0,0,0,597,598,5,56,0,0,598,599,3,86,43,
        0,599,57,1,0,0,0,600,614,5,61,0,0,601,606,3,54,27,0,602,603,5,61,
        0,0,603,605,3,54,27,0,604,602,1,0,0,0,605,608,1,0,0,0,606,604,1,
        0,0,0,606,607,1,0,0,0,607,611,1,0,0,0,608,606,1,0,0,0,609,610,5,
        61,0,0,610,612,3,104,52,0,611,609,1,0,0,0,611,612,1,0,0,0,612,615,
        1,0,0,0,613,615,3,104,52,0,614,601,1,0,0,0,614,613,1,0,0,0,615,631,
        1,0,0,0,616,617,4,29,5,0,617,618,5,58,0,0,618,621,3,70,35,0,619,
        620,5,61,0,0,620,622,3,94,47,0,621,619,1,0,0,0,621,622,1,0,0,0,622,
        623,1,0,0,0,623,624,6,29,-1,0,624,631,1,0,0,0,625,628,7,6,0,0,626,
        629,3,104,52,0,627,629,3,94,47,0,628,626,1,0,0,0,628,627,1,0,0,0,
        629,631,1,0,0,0,630,600,1,0,0,0,630,616,1,0,0,0,630,625,1,0,0,0,
        631,59,1,0,0,0,632,637,3,86,43,0,633,634,5,57,0,0,634,636,3,86,43,
        0,635,633,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,
        0,638,641,1,0,0,0,639,637,1,0,0,0,640,642,5,57,0,0,641,640,1,0,0,
        0,641,642,1,0,0,0,642,61,1,0,0,0,643,648,3,64,32,0,644,645,5,57,
        0,0,645,647,3,64,32,0,646,644,1,0,0,0,647,650,1,0,0,0,648,646,1,
        0,0,0,648,649,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,651,653,5,
        57,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,63,1,0,0,0,654,657,3,
        98,49,0,655,656,5,10,0,0,656,658,3,98,49,0,657,655,1,0,0,0,657,658,
        1,0,0,0,658,65,1,0,0,0,659,664,3,68,34,0,660,661,5,57,0,0,661,663,
        3,68,34,0,662,660,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,
        1,0,0,0,665,67,1,0,0,0,666,664,1,0,0,0,667,670,3,96,48,0,668,669,
        5,10,0,0,669,671,3,98,49,0,670,668,1,0,0,0,670,671,1,0,0,0,671,69,
        1,0,0,0,672,678,3,82,41,0,673,674,5,13,0,0,674,675,3,82,41,0,675,
        676,5,15,0,0,676,677,3,70,35,0,677,679,1,0,0,0,678,673,1,0,0,0,678,
        679,1,0,0,0,679,687,1,0,0,0,680,682,5,24,0,0,681,683,3,72,36,0,682,
        681,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,685,5,58,0,0,685,
        687,3,70,35,0,686,672,1,0,0,0,686,680,1,0,0,0,687,71,1,0,0,0,688,
        689,3,74,37,0,689,690,5,57,0,0,690,692,1,0,0,0,691,688,1,0,0,0,691,
        692,1,0,0,0,692,703,1,0,0,0,693,696,3,78,39,0,694,695,5,57,0,0,695,
        697,3,74,37,0,696,694,1,0,0,0,696,697,1,0,0,0,697,700,1,0,0,0,698,
        699,5,57,0,0,699,701,3,80,40,0,700,698,1,0,0,0,700,701,1,0,0,0,701,
        704,1,0,0,0,702,704,3,80,40,0,703,693,1,0,0,0,703,702,1,0,0,0,704,
        706,1,0,0,0,705,707,5,57,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,
        713,1,0,0,0,708,710,3,74,37,0,709,711,5,57,0,0,710,709,1,0,0,0,710,
        711,1,0,0,0,711,713,1,0,0,0,712,691,1,0,0,0,712,708,1,0,0,0,713,
        73,1,0,0,0,714,719,3,76,38,0,715,716,5,57,0,0,716,718,3,76,38,0,
        717,715,1,0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,
        720,75,1,0,0,0,721,719,1,0,0,0,722,725,3,98,49,0,723,724,5,61,0,
        0,724,726,3,70,35,0,725,723,1,0,0,0,725,726,1,0,0,0,726,729,1,0,
        0,0,727,729,5,56,0,0,728,722,1,0,0,0,728,727,1,0,0,0,729,77,1,0,
        0,0,730,731,5,56,0,0,731,732,3,98,49,0,732,79,1,0,0,0,733,734,5,
        60,0,0,734,735,3,98,49,0,735,81,1,0,0,0,736,737,6,41,-1,0,737,741,
        3,84,42,0,738,739,5,27,0,0,739,741,3,82,41,3,740,736,1,0,0,0,740,
        738,1,0,0,0,741,750,1,0,0,0,742,743,10,2,0,0,743,744,5,26,0,0,744,
        749,3,82,41,3,745,746,10,1,0,0,746,747,5,25,0,0,747,749,3,82,41,
        2,748,742,1,0,0,0,748,745,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,
        0,750,751,1,0,0,0,751,83,1,0,0,0,752,750,1,0,0,0,753,754,6,42,-1,
        0,754,755,3,86,43,0,755,777,1,0,0,0,756,772,10,2,0,0,757,773,5,73,
        0,0,758,773,5,74,0,0,759,773,5,75,0,0,760,773,5,76,0,0,761,773,5,
        77,0,0,762,773,5,78,0,0,763,773,5,79,0,0,764,766,5,27,0,0,765,764,
        1,0,0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,773,5,18,0,0,768,770,
        5,28,0,0,769,771,5,27,0,0,770,769,1,0,0,0,770,771,1,0,0,0,771,773,
        1,0,0,0,772,757,1,0,0,0,772,758,1,0,0,0,772,759,1,0,0,0,772,760,
        1,0,0,0,772,761,1,0,0,0,772,762,1,0,0,0,772,763,1,0,0,0,772,765,
        1,0,0,0,772,768,1,0,0,0,773,774,1,0,0,0,774,776,3,84,42,3,775,756,
        1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,85,1,
        0,0,0,779,777,1,0,0,0,780,782,6,43,-1,0,781,783,5,36,0,0,782,781,
        1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,788,3,88,44,0,785,787,
        3,108,54,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,
        1,0,0,0,789,794,1,0,0,0,790,788,1,0,0,0,791,792,7,7,0,0,792,794,
        3,86,43,7,793,780,1,0,0,0,793,791,1,0,0,0,794,818,1,0,0,0,795,796,
        10,8,0,0,796,797,5,60,0,0,797,817,3,86,43,8,798,799,10,6,0,0,799,
        800,7,8,0,0,800,817,3,86,43,7,801,802,10,5,0,0,802,803,7,9,0,0,803,
        817,3,86,43,6,804,805,10,4,0,0,805,806,7,10,0,0,806,817,3,86,43,
        5,807,808,10,3,0,0,808,809,5,64,0,0,809,817,3,86,43,4,810,811,10,
        2,0,0,811,812,5,63,0,0,812,817,3,86,43,3,813,814,10,1,0,0,814,815,
        5,62,0,0,815,817,3,86,43,2,816,795,1,0,0,0,816,798,1,0,0,0,816,801,
        1,0,0,0,816,804,1,0,0,0,816,807,1,0,0,0,816,810,1,0,0,0,816,813,
        1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,87,1,
        0,0,0,820,818,1,0,0,0,821,824,5,102,0,0,822,825,3,104,52,0,823,825,
        3,92,46,0,824,822,1,0,0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,826,
        1,0,0,0,826,859,5,103,0,0,827,829,5,106,0,0,828,830,3,92,46,0,829,
        828,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,859,5,107,0,0,832,
        834,5,104,0,0,833,835,3,90,45,0,834,833,1,0,0,0,834,835,1,0,0,0,
        835,836,1,0,0,0,836,859,5,105,0,0,837,838,5,55,0,0,838,840,3,94,
        47,0,839,841,5,57,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,
        0,0,0,842,843,5,55,0,0,843,859,1,0,0,0,844,859,5,54,0,0,845,859,
        3,98,49,0,846,859,5,37,0,0,847,859,5,38,0,0,848,850,5,68,0,0,849,
        848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,859,3,100,50,0,852,
        859,5,20,0,0,853,855,5,95,0,0,854,853,1,0,0,0,855,856,1,0,0,0,856,
        854,1,0,0,0,856,857,1,0,0,0,857,859,1,0,0,0,858,821,1,0,0,0,858,
        827,1,0,0,0,858,832,1,0,0,0,858,837,1,0,0,0,858,844,1,0,0,0,858,
        845,1,0,0,0,858,846,1,0,0,0,858,847,1,0,0,0,858,849,1,0,0,0,858,
        852,1,0,0,0,858,854,1,0,0,0,859,89,1,0,0,0,860,861,3,70,35,0,861,
        862,5,58,0,0,862,863,3,70,35,0,863,867,1,0,0,0,864,865,5,60,0,0,
        865,867,3,86,43,0,866,860,1,0,0,0,866,864,1,0,0,0,867,879,1,0,0,
        0,868,875,5,57,0,0,869,870,3,70,35,0,870,871,5,58,0,0,871,872,3,
        70,35,0,872,876,1,0,0,0,873,874,5,60,0,0,874,876,3,86,43,0,875,869,
        1,0,0,0,875,873,1,0,0,0,876,878,1,0,0,0,877,868,1,0,0,0,878,881,
        1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,883,1,0,0,0,881,879,
        1,0,0,0,882,884,5,57,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,892,
        1,0,0,0,885,886,3,70,35,0,886,887,5,58,0,0,887,888,3,70,35,0,888,
        889,3,122,61,0,889,892,1,0,0,0,890,892,3,92,46,0,891,866,1,0,0,0,
        891,885,1,0,0,0,891,890,1,0,0,0,892,91,1,0,0,0,893,896,3,70,35,0,
        894,896,3,56,28,0,895,893,1,0,0,0,895,894,1,0,0,0,896,911,1,0,0,
        0,897,912,3,122,61,0,898,901,5,57,0,0,899,902,3,70,35,0,900,902,
        3,56,28,0,901,899,1,0,0,0,901,900,1,0,0,0,902,904,1,0,0,0,903,898,
        1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,905,906,1,0,0,0,906,909,
        1,0,0,0,907,905,1,0,0,0,908,910,5,57,0,0,909,908,1,0,0,0,909,910,
        1,0,0,0,910,912,1,0,0,0,911,897,1,0,0,0,911,905,1,0,0,0,912,93,1,
        0,0,0,913,918,3,70,35,0,914,915,5,57,0,0,915,917,3,70,35,0,916,914,
        1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,922,
        1,0,0,0,920,918,1,0,0,0,921,923,5,57,0,0,922,921,1,0,0,0,922,923,
        1,0,0,0,923,95,1,0,0,0,924,925,6,48,-1,0,925,926,3,98,49,0,926,932,
        1,0,0,0,927,928,10,2,0,0,928,929,5,53,0,0,929,931,3,98,49,0,930,
        927,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,
        97,1,0,0,0,934,932,1,0,0,0,935,936,7,11,0,0,936,99,1,0,0,0,937,941,
        3,102,51,0,938,941,5,100,0,0,939,941,5,101,0,0,940,937,1,0,0,0,940,
        938,1,0,0,0,940,939,1,0,0,0,941,101,1,0,0,0,942,943,7,12,0,0,943,
        103,1,0,0,0,944,946,5,30,0,0,945,947,3,106,53,0,946,945,1,0,0,0,
        946,947,1,0,0,0,947,105,1,0,0,0,948,949,5,7,0,0,949,952,3,70,35,
        0,950,952,3,94,47,0,951,948,1,0,0,0,951,950,1,0,0,0,952,107,1,0,
        0,0,953,954,5,53,0,0,954,956,3,98,49,0,955,957,3,110,55,0,956,955,
        1,0,0,0,956,957,1,0,0,0,957,960,1,0,0,0,958,960,3,110,55,0,959,953,
        1,0,0,0,959,958,1,0,0,0,960,109,1,0,0,0,961,963,5,102,0,0,962,964,
        3,112,56,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,971,
        5,103,0,0,966,967,5,106,0,0,967,968,3,116,58,0,968,969,5,107,0,0,
        969,971,1,0,0,0,970,961,1,0,0,0,970,966,1,0,0,0,971,111,1,0,0,0,
        972,977,3,114,57,0,973,974,5,57,0,0,974,976,3,114,57,0,975,973,1,
        0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,981,1,
        0,0,0,979,977,1,0,0,0,980,982,5,57,0,0,981,980,1,0,0,0,981,982,1,
        0,0,0,982,113,1,0,0,0,983,987,3,70,35,0,984,988,3,122,61,0,985,986,
        5,61,0,0,986,988,3,70,35,0,987,984,1,0,0,0,987,985,1,0,0,0,987,988,
        1,0,0,0,988,992,1,0,0,0,989,990,7,13,0,0,990,992,3,70,35,0,991,983,
        1,0,0,0,991,989,1,0,0,0,992,115,1,0,0,0,993,998,3,118,59,0,994,995,
        5,57,0,0,995,997,3,118,59,0,996,994,1,0,0,0,997,1000,1,0,0,0,998,
        996,1,0,0,0,998,999,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1001,
        1003,5,57,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,117,1,0,0,
        0,1004,1023,5,54,0,0,1005,1013,3,70,35,0,1006,1008,5,58,0,0,1007,
        1009,3,70,35,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,
        0,0,1010,1012,3,120,60,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,
        1014,1,0,0,0,1013,1006,1,0,0,0,1013,1014,1,0,0,0,1014,1023,1,0,0,
        0,1015,1017,5,58,0,0,1016,1018,3,70,35,0,1017,1016,1,0,0,0,1017,
        1018,1,0,0,0,1018,1020,1,0,0,0,1019,1021,3,120,60,0,1020,1019,1,
        0,0,0,1020,1021,1,0,0,0,1021,1023,1,0,0,0,1022,1004,1,0,0,0,1022,
        1005,1,0,0,0,1022,1015,1,0,0,0,1023,119,1,0,0,0,1024,1026,5,58,0,
        0,1025,1027,3,70,35,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,121,
        1,0,0,0,1028,1029,5,17,0,0,1029,1030,3,60,30,0,1030,1031,5,18,0,
        0,1031,1033,3,82,41,0,1032,1034,3,124,62,0,1033,1032,1,0,0,0,1033,
        1034,1,0,0,0,1034,123,1,0,0,0,1035,1042,3,122,61,0,1036,1037,5,13,
        0,0,1037,1039,3,70,35,0,1038,1040,3,124,62,0,1039,1038,1,0,0,0,1039,
        1040,1,0,0,0,1040,1042,1,0,0,0,1041,1035,1,0,0,0,1041,1036,1,0,0,
        0,1042,125,1,0,0,0,157,129,138,142,144,150,155,164,168,171,179,194,
        197,200,203,206,214,223,228,248,256,260,267,274,284,287,307,321,
        323,332,335,341,347,352,358,366,372,381,386,390,393,396,400,402,
        415,421,424,429,436,440,446,451,456,465,469,477,480,482,493,501,
        503,505,509,518,525,527,536,544,554,556,564,573,578,582,588,592,
        595,606,611,614,621,628,630,637,641,648,652,657,664,670,678,682,
        686,691,696,700,703,706,710,712,719,725,728,740,748,750,765,770,
        772,777,782,788,793,816,818,824,829,834,840,849,856,858,866,875,
        879,883,891,895,901,905,909,911,918,922,932,940,946,951,956,959,
        963,970,977,981,987,991,998,1002,1008,1011,1013,1017,1020,1022,1026,
        1033,1039,1041
    ]

class FizzParser ( PythonParserBase ):

    grammarFileName = "FizzParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'atomic'", "'serial'", "'parallel'", "'oneof'", "'any'", 
                     "'action'", "'func'", "'params'", "'init'", "'invariants'", 
                     "'always'", "'eventually'", "'.'", "'...'", "'`'", 
                     "'*'", "','", "':'", "';'", "'**'", "'='", "'|'", "'^'", 
                     "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", 
                     "'//'", "'~'", "'<'", "'>'", "'=='", "'>='", "'<='", 
                     "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", 
                     "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", 
                     "'>>='", "'**='", "'//='", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "ATOMIC", "SERIAL", 
                      "PARALLEL", "ONEOF", "ANY", "ACTION", "FUNC", "PARAMS", 
                      "INIT", "INVARIANTS", "ALWAYS", "EVENTUALLY", "DOT", 
                      "ELLIPSIS", "REVERSE_QUOTE", "STAR", "COMMA", "COLON", 
                      "SEMI_COLON", "POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "LESS_THAN", "GREATER_THAN", 
                      "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
                      "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
                      "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
                      "POWER_ASSIGN", "IDIV_ASSIGN", "STRING", "DECIMAL_INTEGER", 
                      "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", 
                      "FLOAT_NUMBER", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", 
                      "LINE_JOIN", "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_compound_stmt = 5
    RULE_suite = 6
    RULE_invariants_suite = 7
    RULE_invariant_stmt = 8
    RULE_decorator = 9
    RULE_elif_clause = 10
    RULE_else_clause = 11
    RULE_finally_clause = 12
    RULE_with_item = 13
    RULE_except_clause = 14
    RULE_classdef = 15
    RULE_funcdef = 16
    RULE_actiondef = 17
    RULE_functiondef = 18
    RULE_typedargslist = 19
    RULE_args = 20
    RULE_kwargs = 21
    RULE_def_parameters = 22
    RULE_def_parameter = 23
    RULE_named_parameter = 24
    RULE_simple_stmt = 25
    RULE_small_stmt = 26
    RULE_testlist_star_expr = 27
    RULE_star_expr = 28
    RULE_assign_part = 29
    RULE_exprlist = 30
    RULE_import_as_names = 31
    RULE_import_as_name = 32
    RULE_dotted_as_names = 33
    RULE_dotted_as_name = 34
    RULE_test = 35
    RULE_varargslist = 36
    RULE_vardef_parameters = 37
    RULE_vardef_parameter = 38
    RULE_varargs = 39
    RULE_varkwargs = 40
    RULE_logical_test = 41
    RULE_comparison = 42
    RULE_expr = 43
    RULE_atom = 44
    RULE_dictorsetmaker = 45
    RULE_testlist_comp = 46
    RULE_testlist = 47
    RULE_dotted_name = 48
    RULE_name = 49
    RULE_number = 50
    RULE_integer = 51
    RULE_yield_expr = 52
    RULE_yield_arg = 53
    RULE_trailer = 54
    RULE_arguments = 55
    RULE_arglist = 56
    RULE_argument = 57
    RULE_subscriptlist = 58
    RULE_subscript = 59
    RULE_sliceop = 60
    RULE_comp_for = 61
    RULE_comp_iter = 62

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "compound_stmt", "suite", "invariants_suite", "invariant_stmt", 
                   "decorator", "elif_clause", "else_clause", "finally_clause", 
                   "with_item", "except_clause", "classdef", "funcdef", 
                   "actiondef", "functiondef", "typedargslist", "args", 
                   "kwargs", "def_parameters", "def_parameter", "named_parameter", 
                   "simple_stmt", "small_stmt", "testlist_star_expr", "star_expr", 
                   "assign_part", "exprlist", "import_as_names", "import_as_name", 
                   "dotted_as_names", "dotted_as_name", "test", "varargslist", 
                   "vardef_parameters", "vardef_parameter", "varargs", "varkwargs", 
                   "logical_test", "comparison", "expr", "atom", "dictorsetmaker", 
                   "testlist_comp", "testlist", "dotted_name", "name", "number", 
                   "integer", "yield_expr", "yield_arg", "trailer", "arguments", 
                   "arglist", "argument", "subscriptlist", "subscript", 
                   "sliceop", "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    ATOMIC=41
    SERIAL=42
    PARALLEL=43
    ONEOF=44
    ANY=45
    ACTION=46
    FUNC=47
    PARAMS=48
    INIT=49
    INVARIANTS=50
    ALWAYS=51
    EVENTUALLY=52
    DOT=53
    ELLIPSIS=54
    REVERSE_QUOTE=55
    STAR=56
    COMMA=57
    COLON=58
    SEMI_COLON=59
    POWER=60
    ASSIGN=61
    OR_OP=62
    XOR=63
    AND_OP=64
    LEFT_SHIFT=65
    RIGHT_SHIFT=66
    ADD=67
    MINUS=68
    DIV=69
    MOD=70
    IDIV=71
    NOT_OP=72
    LESS_THAN=73
    GREATER_THAN=74
    EQUALS=75
    GT_EQ=76
    LT_EQ=77
    NOT_EQ_1=78
    NOT_EQ_2=79
    AT=80
    ARROW=81
    ADD_ASSIGN=82
    SUB_ASSIGN=83
    MULT_ASSIGN=84
    AT_ASSIGN=85
    DIV_ASSIGN=86
    MOD_ASSIGN=87
    AND_ASSIGN=88
    OR_ASSIGN=89
    XOR_ASSIGN=90
    LEFT_SHIFT_ASSIGN=91
    RIGHT_SHIFT_ASSIGN=92
    POWER_ASSIGN=93
    IDIV_ASSIGN=94
    STRING=95
    DECIMAL_INTEGER=96
    OCT_INTEGER=97
    HEX_INTEGER=98
    BIN_INTEGER=99
    IMAG_NUMBER=100
    FLOAT_NUMBER=101
    OPEN_PAREN=102
    CLOSE_PAREN=103
    OPEN_BRACE=104
    CLOSE_BRACE=105
    OPEN_BRACKET=106
    CLOSE_BRACKET=107
    NAME=108
    LINE_JOIN=109
    NEWLINE=110
    WS=111
    COMMENT=112

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(FizzParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(FizzParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(FizzParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = FizzParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 126
                self.single_input()

            elif la_ == 2:
                self.state = 127
                self.file_input()

            elif la_ == 3:
                self.state = 128
                self.eval_input()


            self.state = 131
            self.match(FizzParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = FizzParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 133
                self.match(FizzParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 134
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 135
                self.compound_stmt()
                self.state = 136
                self.match(FizzParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = FizzParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 142
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 140
                        self.match(FizzParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 141
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 144 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return FizzParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = FizzParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 146
            self.testlist()
            self.state = 150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 147
                self.match(FizzParser.LINE_BREAK)
                self.state = 152
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FizzParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 153
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 154
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FizzParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_stmt" ):
                listener.enterAny_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_stmt" ):
                listener.exitAny_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_stmt" ):
                return visitor.visitAny_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Flow_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)
        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Init_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INIT(self):
            return self.getToken(FizzParser.INIT, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_stmt" ):
                listener.enterInit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_stmt" ):
                listener.exitInit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_stmt" ):
                return visitor.visitInit_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Invariants_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVARIANTS(self):
            return self.getToken(FizzParser.INVARIANTS, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def invariants_suite(self):
            return self.getTypedRuleContext(FizzParser.Invariants_suiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_stmt" ):
                listener.enterInvariants_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_stmt" ):
                listener.exitInvariants_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_stmt" ):
                return visitor.visitInvariants_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Action_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def actiondef(self):
            return self.getTypedRuleContext(FizzParser.ActiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_stmt" ):
                listener.enterAction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_stmt" ):
                listener.exitAction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_stmt" ):
                return visitor.visitAction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FizzParser.TRY, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(FizzParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FizzParser.IF, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(FizzParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FizzParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(FizzParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(FizzParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Function_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondef(self):
            return self.getTypedRuleContext(FizzParser.FunctiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = FizzParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                localctx = FizzParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 157
                self.match(FizzParser.IF)
                self.state = 158
                self.test()
                self.state = 159
                self.match(FizzParser.COLON)
                self.state = 160
                self.suite()
                self.state = 164
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 161
                        self.elif_clause() 
                    self.state = 166
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                self.state = 168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 167
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = FizzParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==42:
                    self.state = 170
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 173
                self.match(FizzParser.WHILE)
                self.state = 174
                self.test()
                self.state = 175
                self.match(FizzParser.COLON)
                self.state = 176
                self.suite()
                pass

            elif la_ == 3:
                localctx = FizzParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0):
                    self.state = 178
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 181
                self.match(FizzParser.FOR)
                self.state = 182
                self.exprlist()
                self.state = 183
                self.match(FizzParser.IN)
                self.state = 184
                self.testlist()
                self.state = 185
                self.match(FizzParser.COLON)
                self.state = 186
                self.suite()
                pass

            elif la_ == 4:
                localctx = FizzParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 188
                self.match(FizzParser.TRY)
                self.state = 189
                self.match(FizzParser.COLON)
                self.state = 190
                self.suite()
                self.state = 203
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 192 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 191
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 194 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 197
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                    if la_ == 1:
                        self.state = 196
                        self.else_clause()


                    self.state = 200
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 199
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 202
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = FizzParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 205
                    self.match(FizzParser.ASYNC)


                self.state = 208
                self.match(FizzParser.WITH)
                self.state = 209
                self.with_item()
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 210
                    self.match(FizzParser.COMMA)
                    self.state = 211
                    self.with_item()
                    self.state = 216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 217
                self.match(FizzParser.COLON)
                self.state = 218
                self.suite()
                pass

            elif la_ == 6:
                localctx = FizzParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 220
                    self.decorator()
                    self.state = 225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 228
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 226
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 227
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = FizzParser.Any_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 230
                self.match(FizzParser.ANY)
                self.state = 231
                self.exprlist()
                self.state = 232
                self.match(FizzParser.IN)
                self.state = 233
                self.testlist()
                self.state = 234
                self.match(FizzParser.COLON)
                self.state = 235
                self.suite()
                pass

            elif la_ == 8:
                localctx = FizzParser.Init_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 237
                self.match(FizzParser.INIT)
                self.state = 238
                self.match(FizzParser.COLON)
                self.state = 239
                self.suite()
                pass

            elif la_ == 9:
                localctx = FizzParser.Invariants_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 240
                self.match(FizzParser.INVARIANTS)
                self.state = 241
                self.match(FizzParser.COLON)
                self.state = 242
                self.invariants_suite()
                pass

            elif la_ == 10:
                localctx = FizzParser.Action_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 243
                self.actiondef()
                pass

            elif la_ == 11:
                localctx = FizzParser.Function_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 244
                self.functiondef()
                pass

            elif la_ == 12:
                localctx = FizzParser.Flow_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 245
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 246
                self.match(FizzParser.COLON)
                self.state = 247
                self.suite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = FizzParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_suite)
        try:
            self.state = 260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.match(FizzParser.LINE_BREAK)
                self.state = 252
                self.match(FizzParser.INDENT)
                self.state = 254 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 253
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 256 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                self.state = 258
                self.match(FizzParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariants_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def invariant_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Invariant_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Invariant_stmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_invariants_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_suite" ):
                listener.enterInvariants_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_suite" ):
                listener.exitInvariants_suite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_suite" ):
                return visitor.visitInvariants_suite(self)
            else:
                return visitor.visitChildren(self)




    def invariants_suite(self):

        localctx = FizzParser.Invariants_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_invariants_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(FizzParser.LINE_BREAK)
            self.state = 263
            self.match(FizzParser.INDENT)
            self.state = 265 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 264
                self.invariant_stmt()
                self.state = 267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 60800725425324032) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0)):
                    break

            self.state = 269
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_invariant_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_stmt" ):
                listener.enterInvariant_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_stmt" ):
                listener.exitInvariant_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_stmt" ):
                return visitor.visitInvariant_stmt(self)
            else:
                return visitor.visitChildren(self)




    def invariant_stmt(self):

        localctx = FizzParser.Invariant_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_invariant_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51 or _la==52:
                self.state = 271
                _la = self._input.LA(1)
                if not(_la==51 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 277
            self.test()
            self.state = 278
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FizzParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(FizzParser.AT)
            self.state = 281
            self.dotted_name(0)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 282
                self.match(FizzParser.OPEN_PAREN)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 283
                    self.arglist()


                self.state = 286
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 289
            self.match(FizzParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FizzParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = FizzParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(FizzParser.ELIF)
            self.state = 292
            self.test()
            self.state = 293
            self.match(FizzParser.COLON)
            self.state = 294
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = FizzParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(FizzParser.ELSE)
            self.state = 297
            self.match(FizzParser.COLON)
            self.state = 298
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FizzParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = FizzParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(FizzParser.FINALLY)
            self.state = 301
            self.match(FizzParser.COLON)
            self.state = 302
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FizzParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.test()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 305
                self.match(FizzParser.AS)
                self.state = 306
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FizzParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FizzParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(FizzParser.EXCEPT)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                self.state = 310
                self.test()
                self.state = 321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 311
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 312
                    self.match(FizzParser.COMMA)
                    self.state = 313
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 316
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 317
                    self.match(FizzParser.AS)
                    self.state = 318
                    self.name()
                    self.SetVersion(3);




            self.state = 325
            self.match(FizzParser.COLON)
            self.state = 326
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FizzParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FizzParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(FizzParser.CLASS)
            self.state = 329
            self.name()
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 330
                self.match(FizzParser.OPEN_PAREN)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 331
                    self.arglist()


                self.state = 334
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 337
            self.match(FizzParser.COLON)
            self.state = 338
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FizzParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(FizzParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FizzParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 340
                self.match(FizzParser.ASYNC)


            self.state = 343
            self.match(FizzParser.DEF)
            self.state = 344
            self.name()
            self.state = 345
            self.match(FizzParser.OPEN_PAREN)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224980747912216576) != 0) or _la==108:
                self.state = 346
                self.typedargslist()


            self.state = 349
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 350
                self.match(FizzParser.ARROW)
                self.state = 351
                self.test()


            self.state = 354
            self.match(FizzParser.COLON)
            self.state = 355
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION(self):
            return self.getToken(FizzParser.ACTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_actiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActiondef" ):
                listener.enterActiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActiondef" ):
                listener.exitActiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActiondef" ):
                return visitor.visitActiondef(self)
            else:
                return visitor.visitChildren(self)




    def actiondef(self):

        localctx = FizzParser.ActiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_actiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 357
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 360
            self.match(FizzParser.ACTION)
            self.state = 361
            self.name()
            self.state = 362
            self.match(FizzParser.COLON)
            self.state = 363
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(FizzParser.FUNC, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_functiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondef" ):
                listener.enterFunctiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondef" ):
                listener.exitFunctiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = FizzParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 365
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 368
            self.match(FizzParser.FUNC)
            self.state = 369
            self.name()
            self.state = 370
            self.match(FizzParser.OPEN_PAREN)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224980747912216576) != 0) or _la==108:
                self.state = 371
                self.typedargslist()


            self.state = 374
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 375
            self.match(FizzParser.COLON)
            self.state = 376
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FizzParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(FizzParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FizzParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 378
                    self.def_parameters()
                    self.state = 379
                    self.match(FizzParser.COMMA)


                self.state = 393
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 383
                    self.args()
                    self.state = 386
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                    if la_ == 1:
                        self.state = 384
                        self.match(FizzParser.COMMA)
                        self.state = 385
                        self.def_parameters()


                    self.state = 390
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 388
                        self.match(FizzParser.COMMA)
                        self.state = 389
                        self.kwargs()


                    pass
                elif token in [60]:
                    self.state = 392
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 395
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self.def_parameters()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 399
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = FizzParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(FizzParser.STAR)
            self.state = 405
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = FizzParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(FizzParser.POWER)
            self.state = 408
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = FizzParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.def_parameter()
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 411
                    self.match(FizzParser.COMMA)
                    self.state = 412
                    self.def_parameter() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = FizzParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.named_parameter()
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 419
                    self.match(FizzParser.ASSIGN)
                    self.state = 420
                    self.test()


                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = FizzParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.name()
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 427
                self.match(FizzParser.COLON)
                self.state = 428
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.SEMI_COLON)
            else:
                return self.getToken(FizzParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FizzParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FizzParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.small_stmt()
            self.state = 436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 432
                    self.match(FizzParser.SEMI_COLON)
                    self.state = 433
                    self.small_stmt() 
                self.state = 438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 439
                self.match(FizzParser.SEMI_COLON)


            self.state = 442
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(FizzParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_call_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.NAME)
            else:
                return self.getToken(FizzParser.NAME, i)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call_stmt" ):
                listener.enterFunc_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call_stmt" ):
                listener.exitFunc_call_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call_stmt" ):
                return visitor.visitFunc_call_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(FizzParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(FizzParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(FizzParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(FizzParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(FizzParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(FizzParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.DOT)
            else:
                return self.getToken(FizzParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ELLIPSIS)
            else:
                return self.getToken(FizzParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(FizzParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FizzParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExec_stmt" ):
                return visitor.visitExec_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FizzParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(FizzParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_stmt" ):
                return visitor.visitPrint_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FizzParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = FizzParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                localctx = FizzParser.Func_call_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 444
                    self.match(FizzParser.NAME)
                    self.state = 445
                    self.match(FizzParser.ASSIGN)


                self.state = 448
                self.match(FizzParser.NAME)
                self.state = 449
                self.match(FizzParser.OPEN_PAREN)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 450
                    self.arglist()


                self.state = 453
                self.match(FizzParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = FizzParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 454
                self.testlist_star_expr()
                self.state = 456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 455
                    self.assign_part()


                pass

            elif la_ == 3:
                localctx = FizzParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 458
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 459
                self.match(FizzParser.PRINT)
                self.state = 482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 460
                    self.test()
                    self.state = 465
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 461
                            self.match(FizzParser.COMMA)
                            self.state = 462
                            self.test() 
                        self.state = 467
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                    self.state = 469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 468
                        self.match(FizzParser.COMMA)


                    pass
                elif token in [66]:
                    self.state = 471
                    self.match(FizzParser.RIGHT_SHIFT)
                    self.state = 472
                    self.test()

                    self.state = 475 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 473
                            self.match(FizzParser.COMMA)
                            self.state = 474
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 477 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 479
                        self.match(FizzParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 4:
                localctx = FizzParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 486
                self.match(FizzParser.DEL)
                self.state = 487
                self.exprlist()
                pass

            elif la_ == 5:
                localctx = FizzParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 488
                self.match(FizzParser.PASS)
                pass

            elif la_ == 6:
                localctx = FizzParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 489
                self.match(FizzParser.BREAK)
                pass

            elif la_ == 7:
                localctx = FizzParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 490
                self.match(FizzParser.CONTINUE)
                pass

            elif la_ == 8:
                localctx = FizzParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 491
                self.match(FizzParser.RETURN)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 492
                    self.testlist()


                pass

            elif la_ == 9:
                localctx = FizzParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 495
                self.match(FizzParser.RAISE)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 496
                    self.test()
                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 497
                        self.match(FizzParser.COMMA)
                        self.state = 498
                        self.test()
                        self.state = 501
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==57:
                            self.state = 499
                            self.match(FizzParser.COMMA)
                            self.state = 500
                            self.test()






                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 507
                    self.match(FizzParser.FROM)
                    self.state = 508
                    self.test()


                pass

            elif la_ == 10:
                localctx = FizzParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 511
                self.yield_expr()
                pass

            elif la_ == 11:
                localctx = FizzParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 512
                self.match(FizzParser.IMPORT)
                self.state = 513
                self.dotted_as_names()
                pass

            elif la_ == 12:
                localctx = FizzParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 514
                self.match(FizzParser.FROM)
                self.state = 527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==53 or _la==54:
                        self.state = 515
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 520
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 521
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 523 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 522
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 525 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==53 or _la==54):
                            break

                    pass


                self.state = 529
                self.match(FizzParser.IMPORT)
                self.state = 536
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 530
                    self.match(FizzParser.STAR)
                    pass
                elif token in [102]:
                    self.state = 531
                    self.match(FizzParser.OPEN_PAREN)
                    self.state = 532
                    self.import_as_names()
                    self.state = 533
                    self.match(FizzParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 108]:
                    self.state = 535
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                localctx = FizzParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 538
                self.match(FizzParser.GLOBAL)
                self.state = 539
                self.name()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 540
                    self.match(FizzParser.COMMA)
                    self.state = 541
                    self.name()
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                localctx = FizzParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 547
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 548
                self.match(FizzParser.EXEC)
                self.state = 549
                self.expr(0)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 550
                    self.match(FizzParser.IN)
                    self.state = 551
                    self.test()
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 552
                        self.match(FizzParser.COMMA)
                        self.state = 553
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 15:
                localctx = FizzParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 560
                self.match(FizzParser.ASSERT)
                self.state = 561
                self.test()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 562
                    self.match(FizzParser.COMMA)
                    self.state = 563
                    self.test()


                pass

            elif la_ == 16:
                localctx = FizzParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 566
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 567
                self.match(FizzParser.NONLOCAL)
                self.state = 568
                self.name()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 569
                    self.match(FizzParser.COMMA)
                    self.state = 570
                    self.name()
                    self.state = 575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FizzParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_testlist_star_expr)
        try:
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 586 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 582
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 580
                            self.test()
                            pass
                        elif token in [56]:
                            self.state = 581
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 584
                        self.match(FizzParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 588 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 590
                    self.test()

                elif la_ == 2:
                    self.state = 591
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 594
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FizzParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(FizzParser.STAR)
            self.state = 598
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ASSIGN)
            else:
                return self.getToken(FizzParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(FizzParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FizzParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FizzParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FizzParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FizzParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FizzParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FizzParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FizzParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FizzParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FizzParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FizzParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = FizzParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.match(FizzParser.ASSIGN)
                self.state = 614
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 56, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 601
                    self.testlist_star_expr()
                    self.state = 606
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 602
                            self.match(FizzParser.ASSIGN)
                            self.state = 603
                            self.testlist_star_expr() 
                        self.state = 608
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==61:
                        self.state = 609
                        self.match(FizzParser.ASSIGN)
                        self.state = 610
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 613
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 617
                self.match(FizzParser.COLON)
                self.state = 618
                self.test()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 619
                    self.match(FizzParser.ASSIGN)
                    self.state = 620
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 625
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 628
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 626
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 627
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FizzParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.expr(0)
            self.state = 637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 633
                    self.match(FizzParser.COMMA)
                    self.state = 634
                    self.expr(0) 
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 640
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FizzParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.import_as_name()
            self.state = 648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 644
                    self.match(FizzParser.COMMA)
                    self.state = 645
                    self.import_as_name() 
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 651
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FizzParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.name()
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 655
                self.match(FizzParser.AS)
                self.state = 656
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FizzParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.dotted_as_name()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 660
                self.match(FizzParser.COMMA)
                self.state = 661
                self.dotted_as_name()
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FizzParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.dotted_name(0)
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 668
                self.match(FizzParser.AS)
                self.state = 669
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(FizzParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FizzParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FizzParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.logical_test(0)
                self.state = 678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 673
                    self.match(FizzParser.IF)
                    self.state = 674
                    self.logical_test(0)
                    self.state = 675
                    self.match(FizzParser.ELSE)
                    self.state = 676
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.match(FizzParser.LAMBDA)
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224980747912216576) != 0) or _la==108:
                    self.state = 681
                    self.varargslist()


                self.state = 684
                self.match(FizzParser.COLON)
                self.state = 685
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(FizzParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(FizzParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FizzParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.vardef_parameters()
                    self.state = 689
                    self.match(FizzParser.COMMA)


                self.state = 703
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 693
                    self.varargs()
                    self.state = 696
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                    if la_ == 1:
                        self.state = 694
                        self.match(FizzParser.COMMA)
                        self.state = 695
                        self.vardef_parameters()


                    self.state = 700
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        self.state = 698
                        self.match(FizzParser.COMMA)
                        self.state = 699
                        self.varkwargs()


                    pass
                elif token in [60]:
                    self.state = 702
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 705
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 708
                self.vardef_parameters()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 709
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = FizzParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.vardef_parameter()
            self.state = 719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 715
                    self.match(FizzParser.COMMA)
                    self.state = 716
                    self.vardef_parameter() 
                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = FizzParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 722
                self.name()
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 723
                    self.match(FizzParser.ASSIGN)
                    self.state = 724
                    self.test()


                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = FizzParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(FizzParser.STAR)
            self.state = 731
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = FizzParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(FizzParser.POWER)
            self.state = 734
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(FizzParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(FizzParser.AND, 0)

        def OR(self):
            return self.getToken(FizzParser.OR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.state = 737
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 738
                self.match(FizzParser.NOT)
                self.state = 739
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 750
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 748
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 742
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 743
                        localctx.op = self.match(FizzParser.AND)
                        self.state = 744
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 745
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 746
                        localctx.op = self.match(FizzParser.OR)
                        self.state = 747
                        self.logical_test(2)
                        pass

             
                self.state = 752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(FizzParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FizzParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FizzParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FizzParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FizzParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FizzParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def IS(self):
            return self.getToken(FizzParser.IS, 0)

        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 756
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 772
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [73]:
                        self.state = 757
                        self.match(FizzParser.LESS_THAN)
                        pass
                    elif token in [74]:
                        self.state = 758
                        self.match(FizzParser.GREATER_THAN)
                        pass
                    elif token in [75]:
                        self.state = 759
                        self.match(FizzParser.EQUALS)
                        pass
                    elif token in [76]:
                        self.state = 760
                        self.match(FizzParser.GT_EQ)
                        pass
                    elif token in [77]:
                        self.state = 761
                        self.match(FizzParser.LT_EQ)
                        pass
                    elif token in [78]:
                        self.state = 762
                        self.match(FizzParser.NOT_EQ_1)
                        pass
                    elif token in [79]:
                        self.state = 763
                        self.match(FizzParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 765
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 764
                            localctx.optional = self.match(FizzParser.NOT)


                        self.state = 767
                        self.match(FizzParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 768
                        self.match(FizzParser.IS)
                        self.state = 770
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 769
                            localctx.optional = self.match(FizzParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 774
                    self.comparison(3) 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(FizzParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FizzParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FizzParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def ADD(self):
            return self.getToken(FizzParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FizzParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def DIV(self):
            return self.getToken(FizzParser.DIV, 0)

        def MOD(self):
            return self.getToken(FizzParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FizzParser.IDIV, 0)

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FizzParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FizzParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FizzParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FizzParser.OR_OP, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 781
                    self.match(FizzParser.AWAIT)


                self.state = 784
                self.atom()
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 785
                        self.trailer() 
                    self.state = 790
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                pass

            elif la_ == 2:
                self.state = 791
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 792
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 818
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 816
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 795
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 796
                        localctx.op = self.match(FizzParser.POWER)
                        self.state = 797
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 798
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 799
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 800
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 801
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 802
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==67 or _la==68):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 803
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 804
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 805
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==65 or _la==66):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 806
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 807
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 808
                        localctx.op = self.match(FizzParser.AND_OP)
                        self.state = 809
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 810
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 811
                        localctx.op = self.match(FizzParser.XOR)
                        self.state = 812
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 813
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 814
                        localctx.op = self.match(FizzParser.OR_OP)
                        self.state = 815
                        self.expr(2)
                        pass

             
                self.state = 820
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(FizzParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FizzParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FizzParser.DictorsetmakerContext,0)


        def REVERSE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.REVERSE_QUOTE)
            else:
                return self.getToken(FizzParser.REVERSE_QUOTE, i)

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(FizzParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NONE(self):
            return self.getToken(FizzParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.STRING)
            else:
                return self.getToken(FizzParser.STRING, i)

        def getRuleIndex(self):
            return FizzParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FizzParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.match(FizzParser.OPEN_PAREN)
                self.state = 824
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 822
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 56, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 823
                    self.testlist_comp()
                    pass
                elif token in [103]:
                    pass
                else:
                    pass
                self.state = 826
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 126102920022196224) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 828
                    self.testlist_comp()


                self.state = 831
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                self.match(FizzParser.OPEN_BRACE)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 833
                    self.dictorsetmaker()


                self.state = 836
                self.match(FizzParser.CLOSE_BRACE)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 4)
                self.state = 837
                self.match(FizzParser.REVERSE_QUOTE)
                self.state = 838
                self.testlist()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 839
                    self.match(FizzParser.COMMA)


                self.state = 842
                self.match(FizzParser.REVERSE_QUOTE)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 844
                self.match(FizzParser.ELLIPSIS)
                pass
            elif token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 6)
                self.state = 845
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 846
                self.match(FizzParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 847
                self.match(FizzParser.EXEC)
                pass
            elif token in [68, 96, 97, 98, 99, 100, 101]:
                self.enterOuterAlt(localctx, 9)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 848
                    self.match(FizzParser.MINUS)


                self.state = 851
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 10)
                self.state = 852
                self.match(FizzParser.NONE)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 11)
                self.state = 854 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 853
                        self.match(FizzParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 856 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COLON)
            else:
                return self.getToken(FizzParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.POWER)
            else:
                return self.getToken(FizzParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FizzParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 860
                    self.test()
                    self.state = 861
                    self.match(FizzParser.COLON)
                    self.state = 862
                    self.test()
                    pass
                elif token in [60]:
                    self.state = 864
                    self.match(FizzParser.POWER)
                    self.state = 865
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 879
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 868
                        self.match(FizzParser.COMMA)
                        self.state = 875
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 869
                            self.test()
                            self.state = 870
                            self.match(FizzParser.COLON)
                            self.state = 871
                            self.test()
                            pass
                        elif token in [60]:
                            self.state = 873
                            self.match(FizzParser.POWER)
                            self.state = 874
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 881
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 882
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.test()
                self.state = 886
                self.match(FizzParser.COLON)
                self.state = 887
                self.test()
                self.state = 888
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 890
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FizzParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.state = 893
                self.test()
                pass
            elif token in [56]:
                self.state = 894
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 897
                self.comp_for()
                pass
            elif token in [57, 103, 105, 107]:
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 898
                        self.match(FizzParser.COMMA)
                        self.state = 901
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 899
                            self.test()
                            pass
                        elif token in [56]:
                            self.state = 900
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 907
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 908
                    self.match(FizzParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FizzParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.test()
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 914
                    self.match(FizzParser.COMMA)
                    self.state = 915
                    self.test() 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 921
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 927
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 928
                    self.match(FizzParser.DOT)
                    self.state = 929
                    self.name() 
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FizzParser.NAME, 0)

        def TRUE(self):
            return self.getToken(FizzParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FizzParser.FALSE, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FizzParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            _la = self._input.LA(1)
            if not(_la==39 or _la==40 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(FizzParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(FizzParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(FizzParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FizzParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_number)
        try:
            self.state = 940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96, 97, 98, 99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.integer()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(FizzParser.IMAG_NUMBER)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 939
                self.match(FizzParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(FizzParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(FizzParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(FizzParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(FizzParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = FizzParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FizzParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FizzParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FizzParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(FizzParser.YIELD)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268416) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                self.state = 945
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FizzParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_yield_arg)
        try:
            self.state = 951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.match(FizzParser.FROM)
                self.state = 949
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(FizzParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FizzParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_trailer)
        try:
            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.match(FizzParser.DOT)
                self.state = 954
                self.name()
                self.state = 956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 955
                    self.arguments()


                pass
            elif token in [102, 106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FizzParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = FizzParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.match(FizzParser.OPEN_PAREN)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 962
                    self.arglist()


                self.state = 965
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 966
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 967
                self.subscriptlist()
                self.state = 968
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FizzParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FizzParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.argument()
            self.state = 977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 973
                    self.match(FizzParser.COMMA)
                    self.state = 974
                    self.argument() 
                self.state = 979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 980
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FizzParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.test()
                self.state = 987
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 984
                    self.comp_for()
                    pass
                elif token in [61]:
                    self.state = 985
                    self.match(FizzParser.ASSIGN)
                    self.state = 986
                    self.test()
                    pass
                elif token in [57, 103]:
                    pass
                else:
                    pass
                pass
            elif token in [56, 60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                _la = self._input.LA(1)
                if not(_la==56 or _la==60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 990
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(FizzParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FizzParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.subscript()
            self.state = 998
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 994
                    self.match(FizzParser.COMMA)
                    self.state = 995
                    self.subscript() 
                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 1001
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FizzParser.SliceopContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = FizzParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.match(FizzParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.test()
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 1006
                    self.match(FizzParser.COLON)
                    self.state = 1008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                        self.state = 1007
                        self.test()


                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==58:
                        self.state = 1010
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1015
                self.match(FizzParser.COLON)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 1016
                    self.test()


                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 1019
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FizzParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(FizzParser.COLON)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                self.state = 1025
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(FizzParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FizzParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(FizzParser.FOR)
            self.state = 1029
            self.exprlist()
            self.state = 1030
            self.match(FizzParser.IN)
            self.state = 1031
            self.logical_test(0)
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 1032
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FizzParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.match(FizzParser.IF)
                self.state = 1037
                self.test()
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 1038
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[14] = self.except_clause_sempred
        self._predicates[26] = self.small_stmt_sempred
        self._predicates[29] = self.assign_part_sempred
        self._predicates[41] = self.logical_test_sempred
        self._predicates[42] = self.comparison_sempred
        self._predicates[43] = self.expr_sempred
        self._predicates[48] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




