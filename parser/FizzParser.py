# Generated from FizzParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,112,1024,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,3,0,128,8,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,3,1,137,8,1,1,2,1,2,4,2,141,8,2,11,2,12,2,142,1,
        3,1,3,5,3,147,8,3,10,3,12,3,150,9,3,1,4,1,4,3,4,154,8,4,1,5,1,5,
        1,5,1,5,1,5,5,5,161,8,5,10,5,12,5,164,9,5,1,5,3,5,167,8,5,1,5,1,
        5,1,5,1,5,1,5,3,5,174,8,5,1,5,3,5,177,8,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,3,5,186,8,5,1,5,1,5,1,5,1,5,4,5,192,8,5,11,5,12,5,193,1,5,
        3,5,197,8,5,1,5,3,5,200,8,5,1,5,3,5,203,8,5,1,5,3,5,206,8,5,1,5,
        1,5,1,5,1,5,5,5,212,8,5,10,5,12,5,215,9,5,1,5,1,5,1,5,1,5,5,5,221,
        8,5,10,5,12,5,224,9,5,1,5,1,5,3,5,228,8,5,1,5,3,5,231,8,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,240,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,252,8,5,1,6,1,6,1,6,1,6,4,6,258,8,6,11,6,12,6,259,
        1,6,1,6,3,6,264,8,6,1,7,1,7,1,7,4,7,269,8,7,11,7,12,7,270,1,7,1,
        7,1,8,5,8,276,8,8,10,8,12,8,279,9,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        3,9,288,8,9,1,9,3,9,291,8,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,3,13,311,8,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,
        325,8,14,3,14,327,8,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,336,
        8,15,1,15,3,15,339,8,15,1,15,1,15,1,15,1,16,3,16,345,8,16,1,16,1,
        16,1,16,1,16,3,16,351,8,16,1,16,1,16,1,16,3,16,356,8,16,1,16,1,16,
        1,16,1,17,3,17,362,8,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        3,18,372,8,18,1,18,1,18,1,18,3,18,377,8,18,1,18,1,18,3,18,381,8,
        18,1,18,3,18,384,8,18,1,18,3,18,387,8,18,1,18,1,18,3,18,391,8,18,
        3,18,393,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,5,21,
        404,8,21,10,21,12,21,407,9,21,1,22,1,22,1,22,3,22,412,8,22,1,22,
        3,22,415,8,22,1,23,1,23,1,23,3,23,420,8,23,1,24,1,24,1,24,5,24,425,
        8,24,10,24,12,24,428,9,24,1,24,3,24,431,8,24,1,24,1,24,1,25,1,25,
        3,25,437,8,25,1,25,1,25,1,25,1,25,1,25,5,25,444,8,25,10,25,12,25,
        447,9,25,1,25,3,25,450,8,25,1,25,1,25,1,25,1,25,4,25,456,8,25,11,
        25,12,25,457,1,25,3,25,461,8,25,3,25,463,8,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,474,8,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,482,8,25,3,25,484,8,25,3,25,486,8,25,1,25,1,25,3,25,490,
        8,25,1,25,1,25,1,25,1,25,1,25,5,25,497,8,25,10,25,12,25,500,9,25,
        1,25,1,25,4,25,504,8,25,11,25,12,25,505,3,25,508,8,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,517,8,25,1,25,1,25,1,25,1,25,5,25,
        523,8,25,10,25,12,25,526,9,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        3,25,535,8,25,3,25,537,8,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,545,
        8,25,1,25,1,25,1,25,1,25,1,25,5,25,552,8,25,10,25,12,25,555,9,25,
        1,25,1,25,3,25,559,8,25,1,26,1,26,3,26,563,8,26,1,26,1,26,4,26,567,
        8,26,11,26,12,26,568,1,26,1,26,3,26,573,8,26,1,26,3,26,576,8,26,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,585,8,28,10,28,12,28,588,
        9,28,1,28,1,28,3,28,592,8,28,1,28,3,28,595,8,28,1,28,1,28,1,28,1,
        28,1,28,3,28,602,8,28,1,28,1,28,1,28,1,28,1,28,3,28,609,8,28,3,28,
        611,8,28,1,29,1,29,1,29,5,29,616,8,29,10,29,12,29,619,9,29,1,29,
        3,29,622,8,29,1,30,1,30,1,30,5,30,627,8,30,10,30,12,30,630,9,30,
        1,30,3,30,633,8,30,1,31,1,31,1,31,3,31,638,8,31,1,32,1,32,1,32,5,
        32,643,8,32,10,32,12,32,646,9,32,1,33,1,33,1,33,3,33,651,8,33,1,
        34,1,34,1,34,1,34,1,34,1,34,3,34,659,8,34,1,34,1,34,3,34,663,8,34,
        1,34,1,34,3,34,667,8,34,1,35,1,35,1,35,3,35,672,8,35,1,35,1,35,1,
        35,3,35,677,8,35,1,35,1,35,3,35,681,8,35,1,35,3,35,684,8,35,1,35,
        3,35,687,8,35,1,35,1,35,3,35,691,8,35,3,35,693,8,35,1,36,1,36,1,
        36,5,36,698,8,36,10,36,12,36,701,9,36,1,37,1,37,1,37,3,37,706,8,
        37,1,37,3,37,709,8,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,
        40,1,40,3,40,721,8,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,729,8,40,
        10,40,12,40,732,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,3,41,746,8,41,1,41,1,41,1,41,3,41,751,8,41,3,41,753,
        8,41,1,41,5,41,756,8,41,10,41,12,41,759,9,41,1,42,1,42,3,42,763,
        8,42,1,42,1,42,5,42,767,8,42,10,42,12,42,770,9,42,1,42,1,42,3,42,
        774,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,797,8,42,
        10,42,12,42,800,9,42,1,43,1,43,1,43,3,43,805,8,43,1,43,1,43,1,43,
        3,43,810,8,43,1,43,1,43,1,43,3,43,815,8,43,1,43,1,43,1,43,1,43,3,
        43,821,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,830,8,43,1,43,
        1,43,1,43,4,43,835,8,43,11,43,12,43,836,3,43,839,8,43,1,44,1,44,
        1,44,1,44,1,44,1,44,3,44,847,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,3,44,856,8,44,5,44,858,8,44,10,44,12,44,861,9,44,1,44,3,44,
        864,8,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,872,8,44,1,45,1,45,3,
        45,876,8,45,1,45,1,45,1,45,1,45,3,45,882,8,45,5,45,884,8,45,10,45,
        12,45,887,9,45,1,45,3,45,890,8,45,3,45,892,8,45,1,46,1,46,1,46,5,
        46,897,8,46,10,46,12,46,900,9,46,1,46,3,46,903,8,46,1,47,1,47,1,
        47,1,47,1,47,1,47,5,47,911,8,47,10,47,12,47,914,9,47,1,48,1,48,1,
        49,1,49,1,49,3,49,921,8,49,1,50,1,50,1,51,1,51,3,51,927,8,51,1,52,
        1,52,1,52,3,52,932,8,52,1,53,1,53,1,53,3,53,937,8,53,1,53,3,53,940,
        8,53,1,54,1,54,3,54,944,8,54,1,54,1,54,1,54,1,54,1,54,3,54,951,8,
        54,1,55,1,55,1,55,5,55,956,8,55,10,55,12,55,959,9,55,1,55,3,55,962,
        8,55,1,56,1,56,1,56,1,56,3,56,968,8,56,1,56,1,56,3,56,972,8,56,1,
        57,1,57,1,57,5,57,977,8,57,10,57,12,57,980,9,57,1,57,3,57,983,8,
        57,1,58,1,58,1,58,1,58,3,58,989,8,58,1,58,3,58,992,8,58,3,58,994,
        8,58,1,58,1,58,3,58,998,8,58,1,58,3,58,1001,8,58,3,58,1003,8,58,
        1,59,1,59,3,59,1007,8,59,1,60,1,60,1,60,1,60,1,60,3,60,1014,8,60,
        1,61,1,61,1,61,1,61,3,61,1020,8,61,3,61,1022,8,61,1,61,0,4,80,82,
        84,94,62,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,0,12,1,0,41,44,1,0,51,52,1,1,3,3,1,0,53,54,1,0,82,94,2,0,
        67,68,72,72,3,0,56,56,69,71,80,80,1,0,67,68,1,0,65,66,2,0,39,40,
        108,108,1,0,96,99,2,0,56,56,60,60,1172,0,127,1,0,0,0,2,136,1,0,0,
        0,4,140,1,0,0,0,6,144,1,0,0,0,8,153,1,0,0,0,10,251,1,0,0,0,12,263,
        1,0,0,0,14,265,1,0,0,0,16,277,1,0,0,0,18,283,1,0,0,0,20,294,1,0,
        0,0,22,299,1,0,0,0,24,303,1,0,0,0,26,307,1,0,0,0,28,312,1,0,0,0,
        30,331,1,0,0,0,32,344,1,0,0,0,34,361,1,0,0,0,36,392,1,0,0,0,38,394,
        1,0,0,0,40,397,1,0,0,0,42,400,1,0,0,0,44,414,1,0,0,0,46,416,1,0,
        0,0,48,421,1,0,0,0,50,558,1,0,0,0,52,575,1,0,0,0,54,577,1,0,0,0,
        56,610,1,0,0,0,58,612,1,0,0,0,60,623,1,0,0,0,62,634,1,0,0,0,64,639,
        1,0,0,0,66,647,1,0,0,0,68,666,1,0,0,0,70,692,1,0,0,0,72,694,1,0,
        0,0,74,708,1,0,0,0,76,710,1,0,0,0,78,713,1,0,0,0,80,720,1,0,0,0,
        82,733,1,0,0,0,84,773,1,0,0,0,86,838,1,0,0,0,88,871,1,0,0,0,90,875,
        1,0,0,0,92,893,1,0,0,0,94,904,1,0,0,0,96,915,1,0,0,0,98,920,1,0,
        0,0,100,922,1,0,0,0,102,924,1,0,0,0,104,931,1,0,0,0,106,939,1,0,
        0,0,108,950,1,0,0,0,110,952,1,0,0,0,112,971,1,0,0,0,114,973,1,0,
        0,0,116,1002,1,0,0,0,118,1004,1,0,0,0,120,1008,1,0,0,0,122,1021,
        1,0,0,0,124,128,3,2,1,0,125,128,3,4,2,0,126,128,3,6,3,0,127,124,
        1,0,0,0,127,125,1,0,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,
        1,0,0,0,129,130,5,0,0,1,130,1,1,0,0,0,131,137,5,3,0,0,132,137,3,
        48,24,0,133,134,3,10,5,0,134,135,5,3,0,0,135,137,1,0,0,0,136,131,
        1,0,0,0,136,132,1,0,0,0,136,133,1,0,0,0,137,3,1,0,0,0,138,141,5,
        3,0,0,139,141,3,8,4,0,140,138,1,0,0,0,140,139,1,0,0,0,141,142,1,
        0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,5,1,0,0,0,144,148,3,92,
        46,0,145,147,5,3,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,
        0,0,148,149,1,0,0,0,149,7,1,0,0,0,150,148,1,0,0,0,151,154,3,48,24,
        0,152,154,3,10,5,0,153,151,1,0,0,0,153,152,1,0,0,0,154,9,1,0,0,0,
        155,156,5,13,0,0,156,157,3,68,34,0,157,158,5,58,0,0,158,162,3,12,
        6,0,159,161,3,20,10,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,
        0,0,0,162,163,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,165,167,3,
        22,11,0,166,165,1,0,0,0,166,167,1,0,0,0,167,252,1,0,0,0,168,169,
        5,16,0,0,169,170,3,68,34,0,170,171,5,58,0,0,171,173,3,12,6,0,172,
        174,3,22,11,0,173,172,1,0,0,0,173,174,1,0,0,0,174,252,1,0,0,0,175,
        177,5,35,0,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,
        179,5,17,0,0,179,180,3,58,29,0,180,181,5,18,0,0,181,182,3,92,46,
        0,182,183,5,58,0,0,183,185,3,12,6,0,184,186,3,22,11,0,185,184,1,
        0,0,0,185,186,1,0,0,0,186,252,1,0,0,0,187,188,5,19,0,0,188,189,5,
        58,0,0,189,202,3,12,6,0,190,192,3,28,14,0,191,190,1,0,0,0,192,193,
        1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,197,
        3,22,11,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,
        3,24,12,0,199,198,1,0,0,0,199,200,1,0,0,0,200,203,1,0,0,0,201,203,
        3,24,12,0,202,191,1,0,0,0,202,201,1,0,0,0,203,252,1,0,0,0,204,206,
        5,35,0,0,205,204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,
        5,22,0,0,208,213,3,26,13,0,209,210,5,57,0,0,210,212,3,26,13,0,211,
        209,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,
        216,1,0,0,0,215,213,1,0,0,0,216,217,5,58,0,0,217,218,3,12,6,0,218,
        252,1,0,0,0,219,221,3,18,9,0,220,219,1,0,0,0,221,224,1,0,0,0,222,
        220,1,0,0,0,222,223,1,0,0,0,223,227,1,0,0,0,224,222,1,0,0,0,225,
        228,3,30,15,0,226,228,3,32,16,0,227,225,1,0,0,0,227,226,1,0,0,0,
        228,252,1,0,0,0,229,231,5,35,0,0,230,229,1,0,0,0,230,231,1,0,0,0,
        231,232,1,0,0,0,232,233,5,45,0,0,233,234,3,58,29,0,234,235,5,18,
        0,0,235,236,3,92,46,0,236,237,5,58,0,0,237,239,3,12,6,0,238,240,
        3,22,11,0,239,238,1,0,0,0,239,240,1,0,0,0,240,252,1,0,0,0,241,242,
        5,49,0,0,242,243,5,58,0,0,243,252,3,12,6,0,244,245,5,50,0,0,245,
        246,5,58,0,0,246,252,3,14,7,0,247,252,3,34,17,0,248,249,7,0,0,0,
        249,250,5,58,0,0,250,252,3,12,6,0,251,155,1,0,0,0,251,168,1,0,0,
        0,251,176,1,0,0,0,251,187,1,0,0,0,251,205,1,0,0,0,251,222,1,0,0,
        0,251,230,1,0,0,0,251,241,1,0,0,0,251,244,1,0,0,0,251,247,1,0,0,
        0,251,248,1,0,0,0,252,11,1,0,0,0,253,264,3,48,24,0,254,255,5,3,0,
        0,255,257,5,1,0,0,256,258,3,8,4,0,257,256,1,0,0,0,258,259,1,0,0,
        0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,5,2,0,
        0,262,264,1,0,0,0,263,253,1,0,0,0,263,254,1,0,0,0,264,13,1,0,0,0,
        265,266,5,3,0,0,266,268,5,1,0,0,267,269,3,16,8,0,268,267,1,0,0,0,
        269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,
        272,273,5,2,0,0,273,15,1,0,0,0,274,276,7,1,0,0,275,274,1,0,0,0,276,
        279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,
        277,1,0,0,0,280,281,3,68,34,0,281,282,7,2,0,0,282,17,1,0,0,0,283,
        284,5,80,0,0,284,290,3,94,47,0,285,287,5,102,0,0,286,288,3,110,55,
        0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,291,5,103,
        0,0,290,285,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,3,
        0,0,293,19,1,0,0,0,294,295,5,14,0,0,295,296,3,68,34,0,296,297,5,
        58,0,0,297,298,3,12,6,0,298,21,1,0,0,0,299,300,5,15,0,0,300,301,
        5,58,0,0,301,302,3,12,6,0,302,23,1,0,0,0,303,304,5,21,0,0,304,305,
        5,58,0,0,305,306,3,12,6,0,306,25,1,0,0,0,307,310,3,68,34,0,308,309,
        5,10,0,0,309,311,3,84,42,0,310,308,1,0,0,0,310,311,1,0,0,0,311,27,
        1,0,0,0,312,326,5,23,0,0,313,324,3,68,34,0,314,315,4,14,0,0,315,
        316,5,57,0,0,316,317,3,96,48,0,317,318,6,14,-1,0,318,325,1,0,0,0,
        319,320,4,14,1,0,320,321,5,10,0,0,321,322,3,96,48,0,322,323,6,14,
        -1,0,323,325,1,0,0,0,324,314,1,0,0,0,324,319,1,0,0,0,324,325,1,0,
        0,0,325,327,1,0,0,0,326,313,1,0,0,0,326,327,1,0,0,0,327,328,1,0,
        0,0,328,329,5,58,0,0,329,330,3,12,6,0,330,29,1,0,0,0,331,332,5,29,
        0,0,332,338,3,96,48,0,333,335,5,102,0,0,334,336,3,110,55,0,335,334,
        1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,5,103,0,0,338,333,
        1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,5,58,0,0,341,342,
        3,12,6,0,342,31,1,0,0,0,343,345,5,35,0,0,344,343,1,0,0,0,344,345,
        1,0,0,0,345,346,1,0,0,0,346,347,5,4,0,0,347,348,3,96,48,0,348,350,
        5,102,0,0,349,351,3,36,18,0,350,349,1,0,0,0,350,351,1,0,0,0,351,
        352,1,0,0,0,352,355,5,103,0,0,353,354,5,81,0,0,354,356,3,68,34,0,
        355,353,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,58,0,0,
        358,359,3,12,6,0,359,33,1,0,0,0,360,362,7,0,0,0,361,360,1,0,0,0,
        361,362,1,0,0,0,362,363,1,0,0,0,363,364,5,46,0,0,364,365,3,96,48,
        0,365,366,5,58,0,0,366,367,3,12,6,0,367,35,1,0,0,0,368,369,3,42,
        21,0,369,370,5,57,0,0,370,372,1,0,0,0,371,368,1,0,0,0,371,372,1,
        0,0,0,372,383,1,0,0,0,373,376,3,38,19,0,374,375,5,57,0,0,375,377,
        3,42,21,0,376,374,1,0,0,0,376,377,1,0,0,0,377,380,1,0,0,0,378,379,
        5,57,0,0,379,381,3,40,20,0,380,378,1,0,0,0,380,381,1,0,0,0,381,384,
        1,0,0,0,382,384,3,40,20,0,383,373,1,0,0,0,383,382,1,0,0,0,384,386,
        1,0,0,0,385,387,5,57,0,0,386,385,1,0,0,0,386,387,1,0,0,0,387,393,
        1,0,0,0,388,390,3,42,21,0,389,391,5,57,0,0,390,389,1,0,0,0,390,391,
        1,0,0,0,391,393,1,0,0,0,392,371,1,0,0,0,392,388,1,0,0,0,393,37,1,
        0,0,0,394,395,5,56,0,0,395,396,3,46,23,0,396,39,1,0,0,0,397,398,
        5,60,0,0,398,399,3,46,23,0,399,41,1,0,0,0,400,405,3,44,22,0,401,
        402,5,57,0,0,402,404,3,44,22,0,403,401,1,0,0,0,404,407,1,0,0,0,405,
        403,1,0,0,0,405,406,1,0,0,0,406,43,1,0,0,0,407,405,1,0,0,0,408,411,
        3,46,23,0,409,410,5,61,0,0,410,412,3,68,34,0,411,409,1,0,0,0,411,
        412,1,0,0,0,412,415,1,0,0,0,413,415,5,56,0,0,414,408,1,0,0,0,414,
        413,1,0,0,0,415,45,1,0,0,0,416,419,3,96,48,0,417,418,5,58,0,0,418,
        420,3,68,34,0,419,417,1,0,0,0,419,420,1,0,0,0,420,47,1,0,0,0,421,
        426,3,50,25,0,422,423,5,59,0,0,423,425,3,50,25,0,424,422,1,0,0,0,
        425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,430,1,0,0,0,
        428,426,1,0,0,0,429,431,5,59,0,0,430,429,1,0,0,0,430,431,1,0,0,0,
        431,432,1,0,0,0,432,433,7,2,0,0,433,49,1,0,0,0,434,436,3,52,26,0,
        435,437,3,56,28,0,436,435,1,0,0,0,436,437,1,0,0,0,437,559,1,0,0,
        0,438,439,4,25,2,0,439,462,5,37,0,0,440,445,3,68,34,0,441,442,5,
        57,0,0,442,444,3,68,34,0,443,441,1,0,0,0,444,447,1,0,0,0,445,443,
        1,0,0,0,445,446,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,448,450,
        5,57,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,463,1,0,0,0,451,452,
        5,66,0,0,452,455,3,68,34,0,453,454,5,57,0,0,454,456,3,68,34,0,455,
        453,1,0,0,0,456,457,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,
        460,1,0,0,0,459,461,5,57,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,
        463,1,0,0,0,462,440,1,0,0,0,462,451,1,0,0,0,463,464,1,0,0,0,464,
        465,6,25,-1,0,465,559,1,0,0,0,466,467,5,31,0,0,467,559,3,58,29,0,
        468,559,5,32,0,0,469,559,5,34,0,0,470,559,5,33,0,0,471,473,5,5,0,
        0,472,474,3,92,46,0,473,472,1,0,0,0,473,474,1,0,0,0,474,559,1,0,
        0,0,475,485,5,6,0,0,476,483,3,68,34,0,477,478,5,57,0,0,478,481,3,
        68,34,0,479,480,5,57,0,0,480,482,3,68,34,0,481,479,1,0,0,0,481,482,
        1,0,0,0,482,484,1,0,0,0,483,477,1,0,0,0,483,484,1,0,0,0,484,486,
        1,0,0,0,485,476,1,0,0,0,485,486,1,0,0,0,486,489,1,0,0,0,487,488,
        5,7,0,0,488,490,3,68,34,0,489,487,1,0,0,0,489,490,1,0,0,0,490,559,
        1,0,0,0,491,559,3,102,51,0,492,493,5,8,0,0,493,559,3,64,32,0,494,
        507,5,7,0,0,495,497,7,3,0,0,496,495,1,0,0,0,497,500,1,0,0,0,498,
        496,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,
        508,3,94,47,0,502,504,7,3,0,0,503,502,1,0,0,0,504,505,1,0,0,0,505,
        503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,498,1,0,0,0,507,
        503,1,0,0,0,508,509,1,0,0,0,509,516,5,8,0,0,510,517,5,56,0,0,511,
        512,5,102,0,0,512,513,3,60,30,0,513,514,5,103,0,0,514,517,1,0,0,
        0,515,517,3,60,30,0,516,510,1,0,0,0,516,511,1,0,0,0,516,515,1,0,
        0,0,517,559,1,0,0,0,518,519,5,11,0,0,519,524,3,96,48,0,520,521,5,
        57,0,0,521,523,3,96,48,0,522,520,1,0,0,0,523,526,1,0,0,0,524,522,
        1,0,0,0,524,525,1,0,0,0,525,559,1,0,0,0,526,524,1,0,0,0,527,528,
        4,25,3,0,528,529,5,38,0,0,529,536,3,84,42,0,530,531,5,18,0,0,531,
        534,3,68,34,0,532,533,5,57,0,0,533,535,3,68,34,0,534,532,1,0,0,0,
        534,535,1,0,0,0,535,537,1,0,0,0,536,530,1,0,0,0,536,537,1,0,0,0,
        537,538,1,0,0,0,538,539,6,25,-1,0,539,559,1,0,0,0,540,541,5,12,0,
        0,541,544,3,68,34,0,542,543,5,57,0,0,543,545,3,68,34,0,544,542,1,
        0,0,0,544,545,1,0,0,0,545,559,1,0,0,0,546,547,4,25,4,0,547,548,5,
        9,0,0,548,553,3,96,48,0,549,550,5,57,0,0,550,552,3,96,48,0,551,549,
        1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,556,
        1,0,0,0,555,553,1,0,0,0,556,557,6,25,-1,0,557,559,1,0,0,0,558,434,
        1,0,0,0,558,438,1,0,0,0,558,466,1,0,0,0,558,468,1,0,0,0,558,469,
        1,0,0,0,558,470,1,0,0,0,558,471,1,0,0,0,558,475,1,0,0,0,558,491,
        1,0,0,0,558,492,1,0,0,0,558,494,1,0,0,0,558,518,1,0,0,0,558,527,
        1,0,0,0,558,540,1,0,0,0,558,546,1,0,0,0,559,51,1,0,0,0,560,563,3,
        68,34,0,561,563,3,54,27,0,562,560,1,0,0,0,562,561,1,0,0,0,563,564,
        1,0,0,0,564,565,5,57,0,0,565,567,1,0,0,0,566,562,1,0,0,0,567,568,
        1,0,0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,572,1,0,0,0,570,573,
        3,68,34,0,571,573,3,54,27,0,572,570,1,0,0,0,572,571,1,0,0,0,572,
        573,1,0,0,0,573,576,1,0,0,0,574,576,3,92,46,0,575,566,1,0,0,0,575,
        574,1,0,0,0,576,53,1,0,0,0,577,578,5,56,0,0,578,579,3,84,42,0,579,
        55,1,0,0,0,580,594,5,61,0,0,581,586,3,52,26,0,582,583,5,61,0,0,583,
        585,3,52,26,0,584,582,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,
        587,1,0,0,0,587,591,1,0,0,0,588,586,1,0,0,0,589,590,5,61,0,0,590,
        592,3,102,51,0,591,589,1,0,0,0,591,592,1,0,0,0,592,595,1,0,0,0,593,
        595,3,102,51,0,594,581,1,0,0,0,594,593,1,0,0,0,595,611,1,0,0,0,596,
        597,4,28,5,0,597,598,5,58,0,0,598,601,3,68,34,0,599,600,5,61,0,0,
        600,602,3,92,46,0,601,599,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,
        0,603,604,6,28,-1,0,604,611,1,0,0,0,605,608,7,4,0,0,606,609,3,102,
        51,0,607,609,3,92,46,0,608,606,1,0,0,0,608,607,1,0,0,0,609,611,1,
        0,0,0,610,580,1,0,0,0,610,596,1,0,0,0,610,605,1,0,0,0,611,57,1,0,
        0,0,612,617,3,84,42,0,613,614,5,57,0,0,614,616,3,84,42,0,615,613,
        1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,621,
        1,0,0,0,619,617,1,0,0,0,620,622,5,57,0,0,621,620,1,0,0,0,621,622,
        1,0,0,0,622,59,1,0,0,0,623,628,3,62,31,0,624,625,5,57,0,0,625,627,
        3,62,31,0,626,624,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,
        1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,631,633,5,57,0,0,632,631,
        1,0,0,0,632,633,1,0,0,0,633,61,1,0,0,0,634,637,3,96,48,0,635,636,
        5,10,0,0,636,638,3,96,48,0,637,635,1,0,0,0,637,638,1,0,0,0,638,63,
        1,0,0,0,639,644,3,66,33,0,640,641,5,57,0,0,641,643,3,66,33,0,642,
        640,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,
        65,1,0,0,0,646,644,1,0,0,0,647,650,3,94,47,0,648,649,5,10,0,0,649,
        651,3,96,48,0,650,648,1,0,0,0,650,651,1,0,0,0,651,67,1,0,0,0,652,
        658,3,80,40,0,653,654,5,13,0,0,654,655,3,80,40,0,655,656,5,15,0,
        0,656,657,3,68,34,0,657,659,1,0,0,0,658,653,1,0,0,0,658,659,1,0,
        0,0,659,667,1,0,0,0,660,662,5,24,0,0,661,663,3,70,35,0,662,661,1,
        0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,665,5,58,0,0,665,667,3,
        68,34,0,666,652,1,0,0,0,666,660,1,0,0,0,667,69,1,0,0,0,668,669,3,
        72,36,0,669,670,5,57,0,0,670,672,1,0,0,0,671,668,1,0,0,0,671,672,
        1,0,0,0,672,683,1,0,0,0,673,676,3,76,38,0,674,675,5,57,0,0,675,677,
        3,72,36,0,676,674,1,0,0,0,676,677,1,0,0,0,677,680,1,0,0,0,678,679,
        5,57,0,0,679,681,3,78,39,0,680,678,1,0,0,0,680,681,1,0,0,0,681,684,
        1,0,0,0,682,684,3,78,39,0,683,673,1,0,0,0,683,682,1,0,0,0,684,686,
        1,0,0,0,685,687,5,57,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,693,
        1,0,0,0,688,690,3,72,36,0,689,691,5,57,0,0,690,689,1,0,0,0,690,691,
        1,0,0,0,691,693,1,0,0,0,692,671,1,0,0,0,692,688,1,0,0,0,693,71,1,
        0,0,0,694,699,3,74,37,0,695,696,5,57,0,0,696,698,3,74,37,0,697,695,
        1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,73,1,
        0,0,0,701,699,1,0,0,0,702,705,3,96,48,0,703,704,5,61,0,0,704,706,
        3,68,34,0,705,703,1,0,0,0,705,706,1,0,0,0,706,709,1,0,0,0,707,709,
        5,56,0,0,708,702,1,0,0,0,708,707,1,0,0,0,709,75,1,0,0,0,710,711,
        5,56,0,0,711,712,3,96,48,0,712,77,1,0,0,0,713,714,5,60,0,0,714,715,
        3,96,48,0,715,79,1,0,0,0,716,717,6,40,-1,0,717,721,3,82,41,0,718,
        719,5,27,0,0,719,721,3,80,40,3,720,716,1,0,0,0,720,718,1,0,0,0,721,
        730,1,0,0,0,722,723,10,2,0,0,723,724,5,26,0,0,724,729,3,80,40,3,
        725,726,10,1,0,0,726,727,5,25,0,0,727,729,3,80,40,2,728,722,1,0,
        0,0,728,725,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,
        0,0,731,81,1,0,0,0,732,730,1,0,0,0,733,734,6,41,-1,0,734,735,3,84,
        42,0,735,757,1,0,0,0,736,752,10,2,0,0,737,753,5,73,0,0,738,753,5,
        74,0,0,739,753,5,75,0,0,740,753,5,76,0,0,741,753,5,77,0,0,742,753,
        5,78,0,0,743,753,5,79,0,0,744,746,5,27,0,0,745,744,1,0,0,0,745,746,
        1,0,0,0,746,747,1,0,0,0,747,753,5,18,0,0,748,750,5,28,0,0,749,751,
        5,27,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,737,
        1,0,0,0,752,738,1,0,0,0,752,739,1,0,0,0,752,740,1,0,0,0,752,741,
        1,0,0,0,752,742,1,0,0,0,752,743,1,0,0,0,752,745,1,0,0,0,752,748,
        1,0,0,0,753,754,1,0,0,0,754,756,3,82,41,3,755,736,1,0,0,0,756,759,
        1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,83,1,0,0,0,759,757,1,
        0,0,0,760,762,6,42,-1,0,761,763,5,36,0,0,762,761,1,0,0,0,762,763,
        1,0,0,0,763,764,1,0,0,0,764,768,3,86,43,0,765,767,3,106,53,0,766,
        765,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,
        774,1,0,0,0,770,768,1,0,0,0,771,772,7,5,0,0,772,774,3,84,42,7,773,
        760,1,0,0,0,773,771,1,0,0,0,774,798,1,0,0,0,775,776,10,8,0,0,776,
        777,5,60,0,0,777,797,3,84,42,8,778,779,10,6,0,0,779,780,7,6,0,0,
        780,797,3,84,42,7,781,782,10,5,0,0,782,783,7,7,0,0,783,797,3,84,
        42,6,784,785,10,4,0,0,785,786,7,8,0,0,786,797,3,84,42,5,787,788,
        10,3,0,0,788,789,5,64,0,0,789,797,3,84,42,4,790,791,10,2,0,0,791,
        792,5,63,0,0,792,797,3,84,42,3,793,794,10,1,0,0,794,795,5,62,0,0,
        795,797,3,84,42,2,796,775,1,0,0,0,796,778,1,0,0,0,796,781,1,0,0,
        0,796,784,1,0,0,0,796,787,1,0,0,0,796,790,1,0,0,0,796,793,1,0,0,
        0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,85,1,0,0,0,
        800,798,1,0,0,0,801,804,5,102,0,0,802,805,3,102,51,0,803,805,3,90,
        45,0,804,802,1,0,0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,806,1,0,
        0,0,806,839,5,103,0,0,807,809,5,106,0,0,808,810,3,90,45,0,809,808,
        1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,839,5,107,0,0,812,814,
        5,104,0,0,813,815,3,88,44,0,814,813,1,0,0,0,814,815,1,0,0,0,815,
        816,1,0,0,0,816,839,5,105,0,0,817,818,5,55,0,0,818,820,3,92,46,0,
        819,821,5,57,0,0,820,819,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,
        822,823,5,55,0,0,823,839,1,0,0,0,824,839,5,54,0,0,825,839,3,96,48,
        0,826,839,5,37,0,0,827,839,5,38,0,0,828,830,5,68,0,0,829,828,1,0,
        0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,839,3,98,49,0,832,839,5,
        20,0,0,833,835,5,95,0,0,834,833,1,0,0,0,835,836,1,0,0,0,836,834,
        1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,0,838,801,1,0,0,0,838,807,
        1,0,0,0,838,812,1,0,0,0,838,817,1,0,0,0,838,824,1,0,0,0,838,825,
        1,0,0,0,838,826,1,0,0,0,838,827,1,0,0,0,838,829,1,0,0,0,838,832,
        1,0,0,0,838,834,1,0,0,0,839,87,1,0,0,0,840,841,3,68,34,0,841,842,
        5,58,0,0,842,843,3,68,34,0,843,847,1,0,0,0,844,845,5,60,0,0,845,
        847,3,84,42,0,846,840,1,0,0,0,846,844,1,0,0,0,847,859,1,0,0,0,848,
        855,5,57,0,0,849,850,3,68,34,0,850,851,5,58,0,0,851,852,3,68,34,
        0,852,856,1,0,0,0,853,854,5,60,0,0,854,856,3,84,42,0,855,849,1,0,
        0,0,855,853,1,0,0,0,856,858,1,0,0,0,857,848,1,0,0,0,858,861,1,0,
        0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,863,1,0,0,0,861,859,1,0,
        0,0,862,864,5,57,0,0,863,862,1,0,0,0,863,864,1,0,0,0,864,872,1,0,
        0,0,865,866,3,68,34,0,866,867,5,58,0,0,867,868,3,68,34,0,868,869,
        3,120,60,0,869,872,1,0,0,0,870,872,3,90,45,0,871,846,1,0,0,0,871,
        865,1,0,0,0,871,870,1,0,0,0,872,89,1,0,0,0,873,876,3,68,34,0,874,
        876,3,54,27,0,875,873,1,0,0,0,875,874,1,0,0,0,876,891,1,0,0,0,877,
        892,3,120,60,0,878,881,5,57,0,0,879,882,3,68,34,0,880,882,3,54,27,
        0,881,879,1,0,0,0,881,880,1,0,0,0,882,884,1,0,0,0,883,878,1,0,0,
        0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,886,889,1,0,0,
        0,887,885,1,0,0,0,888,890,5,57,0,0,889,888,1,0,0,0,889,890,1,0,0,
        0,890,892,1,0,0,0,891,877,1,0,0,0,891,885,1,0,0,0,892,91,1,0,0,0,
        893,898,3,68,34,0,894,895,5,57,0,0,895,897,3,68,34,0,896,894,1,0,
        0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,899,1,0,0,0,899,902,1,0,
        0,0,900,898,1,0,0,0,901,903,5,57,0,0,902,901,1,0,0,0,902,903,1,0,
        0,0,903,93,1,0,0,0,904,905,6,47,-1,0,905,906,3,96,48,0,906,912,1,
        0,0,0,907,908,10,2,0,0,908,909,5,53,0,0,909,911,3,96,48,0,910,907,
        1,0,0,0,911,914,1,0,0,0,912,910,1,0,0,0,912,913,1,0,0,0,913,95,1,
        0,0,0,914,912,1,0,0,0,915,916,7,9,0,0,916,97,1,0,0,0,917,921,3,100,
        50,0,918,921,5,100,0,0,919,921,5,101,0,0,920,917,1,0,0,0,920,918,
        1,0,0,0,920,919,1,0,0,0,921,99,1,0,0,0,922,923,7,10,0,0,923,101,
        1,0,0,0,924,926,5,30,0,0,925,927,3,104,52,0,926,925,1,0,0,0,926,
        927,1,0,0,0,927,103,1,0,0,0,928,929,5,7,0,0,929,932,3,68,34,0,930,
        932,3,92,46,0,931,928,1,0,0,0,931,930,1,0,0,0,932,105,1,0,0,0,933,
        934,5,53,0,0,934,936,3,96,48,0,935,937,3,108,54,0,936,935,1,0,0,
        0,936,937,1,0,0,0,937,940,1,0,0,0,938,940,3,108,54,0,939,933,1,0,
        0,0,939,938,1,0,0,0,940,107,1,0,0,0,941,943,5,102,0,0,942,944,3,
        110,55,0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,951,
        5,103,0,0,946,947,5,106,0,0,947,948,3,114,57,0,948,949,5,107,0,0,
        949,951,1,0,0,0,950,941,1,0,0,0,950,946,1,0,0,0,951,109,1,0,0,0,
        952,957,3,112,56,0,953,954,5,57,0,0,954,956,3,112,56,0,955,953,1,
        0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,961,1,
        0,0,0,959,957,1,0,0,0,960,962,5,57,0,0,961,960,1,0,0,0,961,962,1,
        0,0,0,962,111,1,0,0,0,963,967,3,68,34,0,964,968,3,120,60,0,965,966,
        5,61,0,0,966,968,3,68,34,0,967,964,1,0,0,0,967,965,1,0,0,0,967,968,
        1,0,0,0,968,972,1,0,0,0,969,970,7,11,0,0,970,972,3,68,34,0,971,963,
        1,0,0,0,971,969,1,0,0,0,972,113,1,0,0,0,973,978,3,116,58,0,974,975,
        5,57,0,0,975,977,3,116,58,0,976,974,1,0,0,0,977,980,1,0,0,0,978,
        976,1,0,0,0,978,979,1,0,0,0,979,982,1,0,0,0,980,978,1,0,0,0,981,
        983,5,57,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,115,1,0,0,0,984,
        1003,5,54,0,0,985,993,3,68,34,0,986,988,5,58,0,0,987,989,3,68,34,
        0,988,987,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,992,3,118,
        59,0,991,990,1,0,0,0,991,992,1,0,0,0,992,994,1,0,0,0,993,986,1,0,
        0,0,993,994,1,0,0,0,994,1003,1,0,0,0,995,997,5,58,0,0,996,998,3,
        68,34,0,997,996,1,0,0,0,997,998,1,0,0,0,998,1000,1,0,0,0,999,1001,
        3,118,59,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1003,1,0,0,0,
        1002,984,1,0,0,0,1002,985,1,0,0,0,1002,995,1,0,0,0,1003,117,1,0,
        0,0,1004,1006,5,58,0,0,1005,1007,3,68,34,0,1006,1005,1,0,0,0,1006,
        1007,1,0,0,0,1007,119,1,0,0,0,1008,1009,5,17,0,0,1009,1010,3,58,
        29,0,1010,1011,5,18,0,0,1011,1013,3,80,40,0,1012,1014,3,122,61,0,
        1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,121,1,0,0,0,1015,1022,3,
        120,60,0,1016,1017,5,13,0,0,1017,1019,3,68,34,0,1018,1020,3,122,
        61,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1022,1,0,0,0,1021,
        1015,1,0,0,0,1021,1016,1,0,0,0,1022,123,1,0,0,0,156,127,136,140,
        142,148,153,162,166,173,176,185,193,196,199,202,205,213,222,227,
        230,239,251,259,263,270,277,287,290,310,324,326,335,338,344,350,
        355,361,371,376,380,383,386,390,392,405,411,414,419,426,430,436,
        445,449,457,460,462,473,481,483,485,489,498,505,507,516,524,534,
        536,544,553,558,562,568,572,575,586,591,594,601,608,610,617,621,
        628,632,637,644,650,658,662,666,671,676,680,683,686,690,692,699,
        705,708,720,728,730,745,750,752,757,762,768,773,796,798,804,809,
        814,820,829,836,838,846,855,859,863,871,875,881,885,889,891,898,
        902,912,920,926,931,936,939,943,950,957,961,967,971,978,982,988,
        991,993,997,1000,1002,1006,1013,1019,1021
    ]

class FizzParser ( PythonParserBase ):

    grammarFileName = "FizzParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'atomic'", "'serial'", "'parallel'", "'oneof'", "'any'", 
                     "'action'", "'func'", "'params'", "'init'", "'invariants'", 
                     "'always'", "'eventually'", "'.'", "'...'", "'`'", 
                     "'*'", "','", "':'", "';'", "'**'", "'='", "'|'", "'^'", 
                     "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", 
                     "'//'", "'~'", "'<'", "'>'", "'=='", "'>='", "'<='", 
                     "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", 
                     "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", 
                     "'>>='", "'**='", "'//='", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "ATOMIC", "SERIAL", 
                      "PARALLEL", "ONEOF", "ANY", "ACTION", "FUNC", "PARAMS", 
                      "INIT", "INVARIANTS", "ALWAYS", "EVENTUALLY", "DOT", 
                      "ELLIPSIS", "REVERSE_QUOTE", "STAR", "COMMA", "COLON", 
                      "SEMI_COLON", "POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "LESS_THAN", "GREATER_THAN", 
                      "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
                      "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
                      "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
                      "POWER_ASSIGN", "IDIV_ASSIGN", "STRING", "DECIMAL_INTEGER", 
                      "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", 
                      "FLOAT_NUMBER", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", 
                      "LINE_JOIN", "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_compound_stmt = 5
    RULE_suite = 6
    RULE_invariants_suite = 7
    RULE_invariant_stmt = 8
    RULE_decorator = 9
    RULE_elif_clause = 10
    RULE_else_clause = 11
    RULE_finally_clause = 12
    RULE_with_item = 13
    RULE_except_clause = 14
    RULE_classdef = 15
    RULE_funcdef = 16
    RULE_actiondef = 17
    RULE_typedargslist = 18
    RULE_args = 19
    RULE_kwargs = 20
    RULE_def_parameters = 21
    RULE_def_parameter = 22
    RULE_named_parameter = 23
    RULE_simple_stmt = 24
    RULE_small_stmt = 25
    RULE_testlist_star_expr = 26
    RULE_star_expr = 27
    RULE_assign_part = 28
    RULE_exprlist = 29
    RULE_import_as_names = 30
    RULE_import_as_name = 31
    RULE_dotted_as_names = 32
    RULE_dotted_as_name = 33
    RULE_test = 34
    RULE_varargslist = 35
    RULE_vardef_parameters = 36
    RULE_vardef_parameter = 37
    RULE_varargs = 38
    RULE_varkwargs = 39
    RULE_logical_test = 40
    RULE_comparison = 41
    RULE_expr = 42
    RULE_atom = 43
    RULE_dictorsetmaker = 44
    RULE_testlist_comp = 45
    RULE_testlist = 46
    RULE_dotted_name = 47
    RULE_name = 48
    RULE_number = 49
    RULE_integer = 50
    RULE_yield_expr = 51
    RULE_yield_arg = 52
    RULE_trailer = 53
    RULE_arguments = 54
    RULE_arglist = 55
    RULE_argument = 56
    RULE_subscriptlist = 57
    RULE_subscript = 58
    RULE_sliceop = 59
    RULE_comp_for = 60
    RULE_comp_iter = 61

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "compound_stmt", "suite", "invariants_suite", "invariant_stmt", 
                   "decorator", "elif_clause", "else_clause", "finally_clause", 
                   "with_item", "except_clause", "classdef", "funcdef", 
                   "actiondef", "typedargslist", "args", "kwargs", "def_parameters", 
                   "def_parameter", "named_parameter", "simple_stmt", "small_stmt", 
                   "testlist_star_expr", "star_expr", "assign_part", "exprlist", 
                   "import_as_names", "import_as_name", "dotted_as_names", 
                   "dotted_as_name", "test", "varargslist", "vardef_parameters", 
                   "vardef_parameter", "varargs", "varkwargs", "logical_test", 
                   "comparison", "expr", "atom", "dictorsetmaker", "testlist_comp", 
                   "testlist", "dotted_name", "name", "number", "integer", 
                   "yield_expr", "yield_arg", "trailer", "arguments", "arglist", 
                   "argument", "subscriptlist", "subscript", "sliceop", 
                   "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    ATOMIC=41
    SERIAL=42
    PARALLEL=43
    ONEOF=44
    ANY=45
    ACTION=46
    FUNC=47
    PARAMS=48
    INIT=49
    INVARIANTS=50
    ALWAYS=51
    EVENTUALLY=52
    DOT=53
    ELLIPSIS=54
    REVERSE_QUOTE=55
    STAR=56
    COMMA=57
    COLON=58
    SEMI_COLON=59
    POWER=60
    ASSIGN=61
    OR_OP=62
    XOR=63
    AND_OP=64
    LEFT_SHIFT=65
    RIGHT_SHIFT=66
    ADD=67
    MINUS=68
    DIV=69
    MOD=70
    IDIV=71
    NOT_OP=72
    LESS_THAN=73
    GREATER_THAN=74
    EQUALS=75
    GT_EQ=76
    LT_EQ=77
    NOT_EQ_1=78
    NOT_EQ_2=79
    AT=80
    ARROW=81
    ADD_ASSIGN=82
    SUB_ASSIGN=83
    MULT_ASSIGN=84
    AT_ASSIGN=85
    DIV_ASSIGN=86
    MOD_ASSIGN=87
    AND_ASSIGN=88
    OR_ASSIGN=89
    XOR_ASSIGN=90
    LEFT_SHIFT_ASSIGN=91
    RIGHT_SHIFT_ASSIGN=92
    POWER_ASSIGN=93
    IDIV_ASSIGN=94
    STRING=95
    DECIMAL_INTEGER=96
    OCT_INTEGER=97
    HEX_INTEGER=98
    BIN_INTEGER=99
    IMAG_NUMBER=100
    FLOAT_NUMBER=101
    OPEN_PAREN=102
    CLOSE_PAREN=103
    OPEN_BRACE=104
    CLOSE_BRACE=105
    OPEN_BRACKET=106
    CLOSE_BRACKET=107
    NAME=108
    LINE_JOIN=109
    NEWLINE=110
    WS=111
    COMMENT=112

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(FizzParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(FizzParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(FizzParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = FizzParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 124
                self.single_input()

            elif la_ == 2:
                self.state = 125
                self.file_input()

            elif la_ == 3:
                self.state = 126
                self.eval_input()


            self.state = 129
            self.match(FizzParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = FizzParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 131
                self.match(FizzParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 132
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 133
                self.compound_stmt()
                self.state = 134
                self.match(FizzParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = FizzParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 140 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 140
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 138
                        self.match(FizzParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 139
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 142 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return FizzParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = FizzParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            self.testlist()
            self.state = 148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 145
                self.match(FizzParser.LINE_BREAK)
                self.state = 150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FizzParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 151
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 152
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FizzParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_stmt" ):
                listener.enterAny_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_stmt" ):
                listener.exitAny_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_stmt" ):
                return visitor.visitAny_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Init_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INIT(self):
            return self.getToken(FizzParser.INIT, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_stmt" ):
                listener.enterInit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_stmt" ):
                listener.exitInit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_stmt" ):
                return visitor.visitInit_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Invariants_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVARIANTS(self):
            return self.getToken(FizzParser.INVARIANTS, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def invariants_suite(self):
            return self.getTypedRuleContext(FizzParser.Invariants_suiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_stmt" ):
                listener.enterInvariants_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_stmt" ):
                listener.exitInvariants_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_stmt" ):
                return visitor.visitInvariants_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Action_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def actiondef(self):
            return self.getTypedRuleContext(FizzParser.ActiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_stmt" ):
                listener.enterAction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_stmt" ):
                listener.exitAction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_stmt" ):
                return visitor.visitAction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Labelled_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)
        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelled_stmt" ):
                listener.enterLabelled_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelled_stmt" ):
                listener.exitLabelled_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelled_stmt" ):
                return visitor.visitLabelled_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FizzParser.TRY, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(FizzParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.cond = None # TestContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FizzParser.IF, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(FizzParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FizzParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(FizzParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(FizzParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = FizzParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                localctx = FizzParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 155
                self.match(FizzParser.IF)
                self.state = 156
                localctx.cond = self.test()
                self.state = 157
                self.match(FizzParser.COLON)
                self.state = 158
                self.suite()
                self.state = 162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 159
                        self.elif_clause() 
                    self.state = 164
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                self.state = 166
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 165
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = FizzParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 168
                self.match(FizzParser.WHILE)
                self.state = 169
                self.test()
                self.state = 170
                self.match(FizzParser.COLON)
                self.state = 171
                self.suite()
                self.state = 173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 172
                    self.else_clause()


                pass

            elif la_ == 3:
                localctx = FizzParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 175
                    self.match(FizzParser.ASYNC)


                self.state = 178
                self.match(FizzParser.FOR)
                self.state = 179
                self.exprlist()
                self.state = 180
                self.match(FizzParser.IN)
                self.state = 181
                self.testlist()
                self.state = 182
                self.match(FizzParser.COLON)
                self.state = 183
                self.suite()
                self.state = 185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 184
                    self.else_clause()


                pass

            elif la_ == 4:
                localctx = FizzParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 187
                self.match(FizzParser.TRY)
                self.state = 188
                self.match(FizzParser.COLON)
                self.state = 189
                self.suite()
                self.state = 202
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 191 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 190
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 193 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                    self.state = 196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 195
                        self.else_clause()


                    self.state = 199
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 198
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 201
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = FizzParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 204
                    self.match(FizzParser.ASYNC)


                self.state = 207
                self.match(FizzParser.WITH)
                self.state = 208
                self.with_item()
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 209
                    self.match(FizzParser.COMMA)
                    self.state = 210
                    self.with_item()
                    self.state = 215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 216
                self.match(FizzParser.COLON)
                self.state = 217
                self.suite()
                pass

            elif la_ == 6:
                localctx = FizzParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 219
                    self.decorator()
                    self.state = 224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 227
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 225
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 226
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = FizzParser.Any_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 229
                    self.match(FizzParser.ASYNC)


                self.state = 232
                self.match(FizzParser.ANY)
                self.state = 233
                self.exprlist()
                self.state = 234
                self.match(FizzParser.IN)
                self.state = 235
                self.testlist()
                self.state = 236
                self.match(FizzParser.COLON)
                self.state = 237
                self.suite()
                self.state = 239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 238
                    self.else_clause()


                pass

            elif la_ == 8:
                localctx = FizzParser.Init_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 241
                self.match(FizzParser.INIT)
                self.state = 242
                self.match(FizzParser.COLON)
                self.state = 243
                self.suite()
                pass

            elif la_ == 9:
                localctx = FizzParser.Invariants_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 244
                self.match(FizzParser.INVARIANTS)
                self.state = 245
                self.match(FizzParser.COLON)
                self.state = 246
                self.invariants_suite()
                pass

            elif la_ == 10:
                localctx = FizzParser.Action_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 247
                self.actiondef()
                pass

            elif la_ == 11:
                localctx = FizzParser.Labelled_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 248
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 249
                self.match(FizzParser.COLON)
                self.state = 250
                self.suite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = FizzParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_suite)
        try:
            self.state = 263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.match(FizzParser.LINE_BREAK)
                self.state = 255
                self.match(FizzParser.INDENT)
                self.state = 257 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 256
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 259 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 261
                self.match(FizzParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariants_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def invariant_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Invariant_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Invariant_stmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_invariants_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_suite" ):
                listener.enterInvariants_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_suite" ):
                listener.exitInvariants_suite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_suite" ):
                return visitor.visitInvariants_suite(self)
            else:
                return visitor.visitChildren(self)




    def invariants_suite(self):

        localctx = FizzParser.Invariants_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_invariants_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(FizzParser.LINE_BREAK)
            self.state = 266
            self.match(FizzParser.INDENT)
            self.state = 268 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 267
                self.invariant_stmt()
                self.state = 270 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 60800725425324032) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0)):
                    break

            self.state = 272
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_invariant_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_stmt" ):
                listener.enterInvariant_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_stmt" ):
                listener.exitInvariant_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_stmt" ):
                return visitor.visitInvariant_stmt(self)
            else:
                return visitor.visitChildren(self)




    def invariant_stmt(self):

        localctx = FizzParser.Invariant_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_invariant_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51 or _la==52:
                self.state = 274
                _la = self._input.LA(1)
                if not(_la==51 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 280
            self.test()
            self.state = 281
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FizzParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(FizzParser.AT)
            self.state = 284
            self.dotted_name(0)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 285
                self.match(FizzParser.OPEN_PAREN)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 286
                    self.arglist()


                self.state = 289
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 292
            self.match(FizzParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FizzParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = FizzParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(FizzParser.ELIF)
            self.state = 295
            self.test()
            self.state = 296
            self.match(FizzParser.COLON)
            self.state = 297
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = FizzParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(FizzParser.ELSE)
            self.state = 300
            self.match(FizzParser.COLON)
            self.state = 301
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FizzParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = FizzParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(FizzParser.FINALLY)
            self.state = 304
            self.match(FizzParser.COLON)
            self.state = 305
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FizzParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.test()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 308
                self.match(FizzParser.AS)
                self.state = 309
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FizzParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FizzParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(FizzParser.EXCEPT)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                self.state = 313
                self.test()
                self.state = 324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 314
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 315
                    self.match(FizzParser.COMMA)
                    self.state = 316
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 319
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 320
                    self.match(FizzParser.AS)
                    self.state = 321
                    self.name()
                    self.SetVersion(3);




            self.state = 328
            self.match(FizzParser.COLON)
            self.state = 329
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FizzParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FizzParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(FizzParser.CLASS)
            self.state = 332
            self.name()
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 333
                self.match(FizzParser.OPEN_PAREN)
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 334
                    self.arglist()


                self.state = 337
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 340
            self.match(FizzParser.COLON)
            self.state = 341
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FizzParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(FizzParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FizzParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 343
                self.match(FizzParser.ASYNC)


            self.state = 346
            self.match(FizzParser.DEF)
            self.state = 347
            self.name()
            self.state = 348
            self.match(FizzParser.OPEN_PAREN)
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224980747912216576) != 0) or _la==108:
                self.state = 349
                self.typedargslist()


            self.state = 352
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 353
                self.match(FizzParser.ARROW)
                self.state = 354
                self.test()


            self.state = 357
            self.match(FizzParser.COLON)
            self.state = 358
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION(self):
            return self.getToken(FizzParser.ACTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_actiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActiondef" ):
                listener.enterActiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActiondef" ):
                listener.exitActiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActiondef" ):
                return visitor.visitActiondef(self)
            else:
                return visitor.visitChildren(self)




    def actiondef(self):

        localctx = FizzParser.ActiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_actiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 360
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 363
            self.match(FizzParser.ACTION)
            self.state = 364
            self.name()
            self.state = 365
            self.match(FizzParser.COLON)
            self.state = 366
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FizzParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(FizzParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FizzParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 368
                    self.def_parameters()
                    self.state = 369
                    self.match(FizzParser.COMMA)


                self.state = 383
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 373
                    self.args()
                    self.state = 376
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 374
                        self.match(FizzParser.COMMA)
                        self.state = 375
                        self.def_parameters()


                    self.state = 380
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                    if la_ == 1:
                        self.state = 378
                        self.match(FizzParser.COMMA)
                        self.state = 379
                        self.kwargs()


                    pass
                elif token in [60]:
                    self.state = 382
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 385
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.def_parameters()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 389
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = FizzParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(FizzParser.STAR)
            self.state = 395
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = FizzParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(FizzParser.POWER)
            self.state = 398
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = FizzParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.def_parameter()
            self.state = 405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 401
                    self.match(FizzParser.COMMA)
                    self.state = 402
                    self.def_parameter() 
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = FizzParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 408
                self.named_parameter()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 409
                    self.match(FizzParser.ASSIGN)
                    self.state = 410
                    self.test()


                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = FizzParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.name()
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 417
                self.match(FizzParser.COLON)
                self.state = 418
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.SEMI_COLON)
            else:
                return self.getToken(FizzParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FizzParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FizzParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.small_stmt()
            self.state = 426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 422
                    self.match(FizzParser.SEMI_COLON)
                    self.state = 423
                    self.small_stmt() 
                self.state = 428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 429
                self.match(FizzParser.SEMI_COLON)


            self.state = 432
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(FizzParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(FizzParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(FizzParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(FizzParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(FizzParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(FizzParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(FizzParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.DOT)
            else:
                return self.getToken(FizzParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ELLIPSIS)
            else:
                return self.getToken(FizzParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(FizzParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FizzParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExec_stmt" ):
                return visitor.visitExec_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FizzParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(FizzParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_stmt" ):
                return visitor.visitPrint_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FizzParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = FizzParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                localctx = FizzParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 434
                self.testlist_star_expr()
                self.state = 436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 435
                    self.assign_part()


                pass

            elif la_ == 2:
                localctx = FizzParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 439
                self.match(FizzParser.PRINT)
                self.state = 462
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 440
                    self.test()
                    self.state = 445
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 441
                            self.match(FizzParser.COMMA)
                            self.state = 442
                            self.test() 
                        self.state = 447
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 448
                        self.match(FizzParser.COMMA)


                    pass
                elif token in [66]:
                    self.state = 451
                    self.match(FizzParser.RIGHT_SHIFT)
                    self.state = 452
                    self.test()

                    self.state = 455 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 453
                            self.match(FizzParser.COMMA)
                            self.state = 454
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 457 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 459
                        self.match(FizzParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 3:
                localctx = FizzParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 466
                self.match(FizzParser.DEL)
                self.state = 467
                self.exprlist()
                pass

            elif la_ == 4:
                localctx = FizzParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 468
                self.match(FizzParser.PASS)
                pass

            elif la_ == 5:
                localctx = FizzParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 469
                self.match(FizzParser.BREAK)
                pass

            elif la_ == 6:
                localctx = FizzParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 470
                self.match(FizzParser.CONTINUE)
                pass

            elif la_ == 7:
                localctx = FizzParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 471
                self.match(FizzParser.RETURN)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 472
                    self.testlist()


                pass

            elif la_ == 8:
                localctx = FizzParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 475
                self.match(FizzParser.RAISE)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 476
                    self.test()
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 477
                        self.match(FizzParser.COMMA)
                        self.state = 478
                        self.test()
                        self.state = 481
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==57:
                            self.state = 479
                            self.match(FizzParser.COMMA)
                            self.state = 480
                            self.test()






                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 487
                    self.match(FizzParser.FROM)
                    self.state = 488
                    self.test()


                pass

            elif la_ == 9:
                localctx = FizzParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 491
                self.yield_expr()
                pass

            elif la_ == 10:
                localctx = FizzParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 492
                self.match(FizzParser.IMPORT)
                self.state = 493
                self.dotted_as_names()
                pass

            elif la_ == 11:
                localctx = FizzParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 494
                self.match(FizzParser.FROM)
                self.state = 507
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==53 or _la==54:
                        self.state = 495
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 500
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 501
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 503 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 502
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 505 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==53 or _la==54):
                            break

                    pass


                self.state = 509
                self.match(FizzParser.IMPORT)
                self.state = 516
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 510
                    self.match(FizzParser.STAR)
                    pass
                elif token in [102]:
                    self.state = 511
                    self.match(FizzParser.OPEN_PAREN)
                    self.state = 512
                    self.import_as_names()
                    self.state = 513
                    self.match(FizzParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 108]:
                    self.state = 515
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = FizzParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 518
                self.match(FizzParser.GLOBAL)
                self.state = 519
                self.name()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 520
                    self.match(FizzParser.COMMA)
                    self.state = 521
                    self.name()
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 13:
                localctx = FizzParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 527
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 528
                self.match(FizzParser.EXEC)
                self.state = 529
                self.expr(0)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 530
                    self.match(FizzParser.IN)
                    self.state = 531
                    self.test()
                    self.state = 534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 532
                        self.match(FizzParser.COMMA)
                        self.state = 533
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 14:
                localctx = FizzParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 540
                self.match(FizzParser.ASSERT)
                self.state = 541
                self.test()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 542
                    self.match(FizzParser.COMMA)
                    self.state = 543
                    self.test()


                pass

            elif la_ == 15:
                localctx = FizzParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 546
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 547
                self.match(FizzParser.NONLOCAL)
                self.state = 548
                self.name()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 549
                    self.match(FizzParser.COMMA)
                    self.state = 550
                    self.name()
                    self.state = 555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FizzParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_testlist_star_expr)
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 562
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 560
                            self.test()
                            pass
                        elif token in [56]:
                            self.state = 561
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 564
                        self.match(FizzParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 568 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 570
                    self.test()

                elif la_ == 2:
                    self.state = 571
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FizzParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(FizzParser.STAR)
            self.state = 578
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ASSIGN)
            else:
                return self.getToken(FizzParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(FizzParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FizzParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FizzParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FizzParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FizzParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FizzParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FizzParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FizzParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FizzParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FizzParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FizzParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = FizzParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 580
                self.match(FizzParser.ASSIGN)
                self.state = 594
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 56, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 581
                    self.testlist_star_expr()
                    self.state = 586
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 582
                            self.match(FizzParser.ASSIGN)
                            self.state = 583
                            self.testlist_star_expr() 
                        self.state = 588
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==61:
                        self.state = 589
                        self.match(FizzParser.ASSIGN)
                        self.state = 590
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 593
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 597
                self.match(FizzParser.COLON)
                self.state = 598
                self.test()
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 599
                    self.match(FizzParser.ASSIGN)
                    self.state = 600
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 608
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 606
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 607
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FizzParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.expr(0)
            self.state = 617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 613
                    self.match(FizzParser.COMMA)
                    self.state = 614
                    self.expr(0) 
                self.state = 619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 620
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FizzParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.import_as_name()
            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 624
                    self.match(FizzParser.COMMA)
                    self.state = 625
                    self.import_as_name() 
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 631
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FizzParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.name()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 635
                self.match(FizzParser.AS)
                self.state = 636
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FizzParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.dotted_as_name()
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 640
                self.match(FizzParser.COMMA)
                self.state = 641
                self.dotted_as_name()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FizzParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.dotted_name(0)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 648
                self.match(FizzParser.AS)
                self.state = 649
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(FizzParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FizzParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FizzParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 666
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.logical_test(0)
                self.state = 658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 653
                    self.match(FizzParser.IF)
                    self.state = 654
                    self.logical_test(0)
                    self.state = 655
                    self.match(FizzParser.ELSE)
                    self.state = 656
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.match(FizzParser.LAMBDA)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224980747912216576) != 0) or _la==108:
                    self.state = 661
                    self.varargslist()


                self.state = 664
                self.match(FizzParser.COLON)
                self.state = 665
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(FizzParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(FizzParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FizzParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 668
                    self.vardef_parameters()
                    self.state = 669
                    self.match(FizzParser.COMMA)


                self.state = 683
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 673
                    self.varargs()
                    self.state = 676
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 674
                        self.match(FizzParser.COMMA)
                        self.state = 675
                        self.vardef_parameters()


                    self.state = 680
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                    if la_ == 1:
                        self.state = 678
                        self.match(FizzParser.COMMA)
                        self.state = 679
                        self.varkwargs()


                    pass
                elif token in [60]:
                    self.state = 682
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 685
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.vardef_parameters()
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 689
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = FizzParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.vardef_parameter()
            self.state = 699
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 695
                    self.match(FizzParser.COMMA)
                    self.state = 696
                    self.vardef_parameter() 
                self.state = 701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = FizzParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.name()
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 703
                    self.match(FizzParser.ASSIGN)
                    self.state = 704
                    self.test()


                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = FizzParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(FizzParser.STAR)
            self.state = 711
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = FizzParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(FizzParser.POWER)
            self.state = 714
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(FizzParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(FizzParser.AND, 0)

        def OR(self):
            return self.getToken(FizzParser.OR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.state = 717
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 718
                self.match(FizzParser.NOT)
                self.state = 719
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 728
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 722
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 723
                        localctx.op = self.match(FizzParser.AND)
                        self.state = 724
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 725
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 726
                        localctx.op = self.match(FizzParser.OR)
                        self.state = 727
                        self.logical_test(2)
                        pass

             
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(FizzParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FizzParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FizzParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FizzParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FizzParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FizzParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def IS(self):
            return self.getToken(FizzParser.IS, 0)

        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 736
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 752
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [73]:
                        self.state = 737
                        self.match(FizzParser.LESS_THAN)
                        pass
                    elif token in [74]:
                        self.state = 738
                        self.match(FizzParser.GREATER_THAN)
                        pass
                    elif token in [75]:
                        self.state = 739
                        self.match(FizzParser.EQUALS)
                        pass
                    elif token in [76]:
                        self.state = 740
                        self.match(FizzParser.GT_EQ)
                        pass
                    elif token in [77]:
                        self.state = 741
                        self.match(FizzParser.LT_EQ)
                        pass
                    elif token in [78]:
                        self.state = 742
                        self.match(FizzParser.NOT_EQ_1)
                        pass
                    elif token in [79]:
                        self.state = 743
                        self.match(FizzParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 745
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 744
                            localctx.optional = self.match(FizzParser.NOT)


                        self.state = 747
                        self.match(FizzParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 748
                        self.match(FizzParser.IS)
                        self.state = 750
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 749
                            localctx.optional = self.match(FizzParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 754
                    self.comparison(3) 
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(FizzParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FizzParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FizzParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def ADD(self):
            return self.getToken(FizzParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FizzParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def DIV(self):
            return self.getToken(FizzParser.DIV, 0)

        def MOD(self):
            return self.getToken(FizzParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FizzParser.IDIV, 0)

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FizzParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FizzParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FizzParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FizzParser.OR_OP, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 761
                    self.match(FizzParser.AWAIT)


                self.state = 764
                self.atom()
                self.state = 768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 765
                        self.trailer() 
                    self.state = 770
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                pass

            elif la_ == 2:
                self.state = 771
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 772
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 796
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 775
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 776
                        localctx.op = self.match(FizzParser.POWER)
                        self.state = 777
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 778
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 779
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 780
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 781
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 782
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==67 or _la==68):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 783
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 784
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 785
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==65 or _la==66):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 786
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 787
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 788
                        localctx.op = self.match(FizzParser.AND_OP)
                        self.state = 789
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 790
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 791
                        localctx.op = self.match(FizzParser.XOR)
                        self.state = 792
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 793
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 794
                        localctx.op = self.match(FizzParser.OR_OP)
                        self.state = 795
                        self.expr(2)
                        pass

             
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(FizzParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FizzParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FizzParser.DictorsetmakerContext,0)


        def REVERSE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.REVERSE_QUOTE)
            else:
                return self.getToken(FizzParser.REVERSE_QUOTE, i)

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(FizzParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NONE(self):
            return self.getToken(FizzParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.STRING)
            else:
                return self.getToken(FizzParser.STRING, i)

        def getRuleIndex(self):
            return FizzParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FizzParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.match(FizzParser.OPEN_PAREN)
                self.state = 804
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 802
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 56, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 803
                    self.testlist_comp()
                    pass
                elif token in [103]:
                    pass
                else:
                    pass
                self.state = 806
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 126102920022196224) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 808
                    self.testlist_comp()


                self.state = 811
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 812
                self.match(FizzParser.OPEN_BRACE)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 813
                    self.dictorsetmaker()


                self.state = 816
                self.match(FizzParser.CLOSE_BRACE)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 4)
                self.state = 817
                self.match(FizzParser.REVERSE_QUOTE)
                self.state = 818
                self.testlist()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 819
                    self.match(FizzParser.COMMA)


                self.state = 822
                self.match(FizzParser.REVERSE_QUOTE)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 824
                self.match(FizzParser.ELLIPSIS)
                pass
            elif token in [39, 40, 108]:
                self.enterOuterAlt(localctx, 6)
                self.state = 825
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 826
                self.match(FizzParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 827
                self.match(FizzParser.EXEC)
                pass
            elif token in [68, 96, 97, 98, 99, 100, 101]:
                self.enterOuterAlt(localctx, 9)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 828
                    self.match(FizzParser.MINUS)


                self.state = 831
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 10)
                self.state = 832
                self.match(FizzParser.NONE)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 11)
                self.state = 834 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 833
                        self.match(FizzParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 836 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COLON)
            else:
                return self.getToken(FizzParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.POWER)
            else:
                return self.getToken(FizzParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FizzParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                    self.state = 840
                    self.test()
                    self.state = 841
                    self.match(FizzParser.COLON)
                    self.state = 842
                    self.test()
                    pass
                elif token in [60]:
                    self.state = 844
                    self.match(FizzParser.POWER)
                    self.state = 845
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 848
                        self.match(FizzParser.COMMA)
                        self.state = 855
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 849
                            self.test()
                            self.state = 850
                            self.match(FizzParser.COLON)
                            self.state = 851
                            self.test()
                            pass
                        elif token in [60]:
                            self.state = 853
                            self.match(FizzParser.POWER)
                            self.state = 854
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 861
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 862
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.test()
                self.state = 866
                self.match(FizzParser.COLON)
                self.state = 867
                self.test()
                self.state = 868
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FizzParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.state = 873
                self.test()
                pass
            elif token in [56]:
                self.state = 874
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 877
                self.comp_for()
                pass
            elif token in [57, 103, 105, 107]:
                self.state = 885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 878
                        self.match(FizzParser.COMMA)
                        self.state = 881
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                            self.state = 879
                            self.test()
                            pass
                        elif token in [56]:
                            self.state = 880
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 887
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 888
                    self.match(FizzParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FizzParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.test()
            self.state = 898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 894
                    self.match(FizzParser.COMMA)
                    self.state = 895
                    self.test() 
                self.state = 900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 901
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 907
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 908
                    self.match(FizzParser.DOT)
                    self.state = 909
                    self.name() 
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FizzParser.NAME, 0)

        def TRUE(self):
            return self.getToken(FizzParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FizzParser.FALSE, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FizzParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            _la = self._input.LA(1)
            if not(_la==39 or _la==40 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(FizzParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(FizzParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(FizzParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FizzParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_number)
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96, 97, 98, 99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.integer()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.match(FizzParser.IMAG_NUMBER)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 919
                self.match(FizzParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(FizzParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(FizzParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(FizzParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(FizzParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = FizzParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FizzParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FizzParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FizzParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(FizzParser.YIELD)
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268416) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                self.state = 925
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FizzParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_yield_arg)
        try:
            self.state = 931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.match(FizzParser.FROM)
                self.state = 929
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(FizzParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FizzParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_trailer)
        try:
            self.state = 939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.match(FizzParser.DOT)
                self.state = 934
                self.name()
                self.state = 936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 935
                    self.arguments()


                pass
            elif token in [102, 106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FizzParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = FizzParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.match(FizzParser.OPEN_PAREN)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1279024424629043200) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 942
                    self.arglist()


                self.state = 945
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 946
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 947
                self.subscriptlist()
                self.state = 948
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FizzParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FizzParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.argument()
            self.state = 957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 953
                    self.match(FizzParser.COMMA)
                    self.state = 954
                    self.argument() 
                self.state = 959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 960
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FizzParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 54, 55, 67, 68, 72, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.test()
                self.state = 967
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 964
                    self.comp_for()
                    pass
                elif token in [61]:
                    self.state = 965
                    self.match(FizzParser.ASSIGN)
                    self.state = 966
                    self.test()
                    pass
                elif token in [57, 103]:
                    pass
                else:
                    pass
                pass
            elif token in [56, 60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                _la = self._input.LA(1)
                if not(_la==56 or _la==60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 970
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(FizzParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FizzParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.subscript()
            self.state = 978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 974
                    self.match(FizzParser.COMMA)
                    self.state = 975
                    self.subscript() 
                self.state = 980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 981
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FizzParser.SliceopContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = FizzParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.match(FizzParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.test()
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 986
                    self.match(FizzParser.COLON)
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                        self.state = 987
                        self.test()


                    self.state = 991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==58:
                        self.state = 990
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.match(FizzParser.COLON)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                    self.state = 996
                    self.test()


                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 999
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FizzParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(FizzParser.COLON)
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54045325984268288) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2954669064227) != 0):
                self.state = 1005
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(FizzParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FizzParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(FizzParser.FOR)
            self.state = 1009
            self.exprlist()
            self.state = 1010
            self.match(FizzParser.IN)
            self.state = 1011
            self.logical_test(0)
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 1012
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FizzParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 1021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.match(FizzParser.IF)
                self.state = 1017
                self.test()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 1018
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[14] = self.except_clause_sempred
        self._predicates[25] = self.small_stmt_sempred
        self._predicates[28] = self.assign_part_sempred
        self._predicates[40] = self.logical_test_sempred
        self._predicates[41] = self.comparison_sempred
        self._predicates[42] = self.expr_sempred
        self._predicates[47] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




